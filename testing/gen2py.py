#!/usr/bin/python
"""
Converts chunk start times, generated by fill_stor.py with mode ms-gen,
into the pythonic data structure.
Also check if there is no inter-server chunk intersection.
"""
import sys
import pprint

fn_template = "fill_stor_data_%s.dat"
SAMPLE_LEN = 65

data = {
    '0': {
        'hi': [], 'lo': []
    },
    '1': {
        'hi': [], 'lo': []
    }
}

def iter_lowest(p, q):
    "Combine hi- and lo-res chunk start times during an hour into one stream"
    p = p[:]
    q = q[:]
    while p and q:
        if p[0] < q[0]:
            yield p.pop(0)
        else:
            yield q.pop(0)
    if p:
        for x in p:
            yield x
    if q:
        for x in q:
            yield x


def _combine_iter(sdata):
    "Combine all hi- and lo-res chunk start times into one stream"
    hi = sdata['hi']
    lo = sdata['lo']
    hp = lp = 0
    while hp < len(hi) and lp < len(lo):
        hi_hour = hi[hp][0]
        lo_hour = lo[lp][0]
        if hi_hour == lo_hour:
            for x in iter_lowest(hi[hp][1], lo[lp][1]):
                yield x + hi_hour
            hp += 1
            lp += 1
        elif hi_hour < lo_hour:
            for x in hi[hp][1]:
                yield x + hi_hour
            hp += 1
        else:
            for x in lo[lp][1]:
                yield x + lo_hour
            lp += 1
    while hp < len(hi):
        hour = hi[hp][0]
        for x in hi[hp][1]:
            yield x + hour
        hp += 1
    while lp < len(lo):
        hour = lo[lp][0]
        for x in lo[lp][1]:
            yield x + hour
        lp += 1


def check():
    "Checks if there is no chunk intersection betwen two servers"
    s0 = _combine_iter(data['0'])
    s1 = _combine_iter(data['1'])
    go = True
    s0time = s0.next()
    s1time = s1.next()
    try:
        while True:
            if s0time < s1time:
                if s0time + SAMPLE_LEN <= s1time:
                    s0time = s0.next()
                    continue
                else:
                    print "#ERROR: diferent servers' chunks intersect at the %s second" % s1time
                    return False
            elif s0time > s1time:
                if s1time + SAMPLE_LEN <= s0time:
                    s1time = s1.next()
                    continue
                else:
                    print "#ERROR: diferent servers' chunks intersect at the %s second" % s0time
                    return False
            else:
                print "#ERROR: diferent servers' chunks intersect at the %s second" % s0time
                return False
    except StopIteration:
        pass # it's success
    return True


# Read both files into data dictionary
for serv in ('0', '1'):
    fn = fn_template % serv
    sd = data[serv]
    with open(fn) as f:
        cur_hour = ''
        starts = {'hi': [], 'lo': []}
        for line in f:
            if len(line.rstrip()) > 0:
                res, hour, start = line.split()
                if hour != cur_hour:
                    starts['hi'] = []
                    starts['lo'] = []
                    cur_hour = hour
                    sd['hi'].append((int(hour), starts['hi']))
                    sd['lo'].append((int(hour), starts['lo']))
                starts[res].append(int(start))

if not check():
    print "# Wrong chunk set!"
    sys.exit(1)
else:
    print "# Chunk separation is OK"

print "chunk_starts = " + pprint.pformat(data, width=250)



