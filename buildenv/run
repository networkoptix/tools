#!/bin/bash

ulimit -n 4096

function printHelp()
{
    echo "-----"
    echo "run [run-options] [binary] [binary options]"
}

CONFIGURATION=debug
#CONFIGURATION=release
BRANCH_NAME=
#if [ $# -ge 1 ]; then
#    BRANCH_NAME="$1"
#fi

BINARY_NAME=./mediaserver
MSERVER_ARGS=
LAUNCH_CMD=
LOOP=
RUN_ARGS_SPECIFIED=0
STRACE=
STRACE_LOG=strace.log
WITH_GDB=
WITH_VALGRIND=
WITH_STRACE=

for i in "$@"
do
    if [[ $i =~ --run-.* ]]; then
        RUN_ARGS_SPECIFIED=$((RUN_ARGS_SPECIFIED+1))
    fi

    if [ $i == "-rh" -o $i == "--run-help"  ] ; then
        printHelp
        exit 0
    elif [ "$i" == "--run-loop" ] ; then
        LOOP=1
    elif [ "$i" == "--run-release" ] ; then
        CONFIGURATION=release
    elif [ "$i" == "--run-debug" ] ; then
        CONFIGURATION=debug
    elif [ "$i" == "--run-strace" ] ; then
        STRACE=1
    elif [ "$i" == "--run-gdb" ] ; then
        WITH_GDB=1
    elif [ "$i" == "--run-valgrind" ] ; then
        WITH_VALGRIND=1
    fi
done

TOTAL_ARGS_SPECIFIED=$#
ARGS_LEFT=$((TOTAL_ARGS_SPECIFIED-RUN_ARGS_SPECIFIED))

#TODO read --smth= arguments (e.g., BRANCH_NAME)

#for i in "$@"
#do
#    if [ $i == "-h" -o $i == "--help"  ] ; then
#        printHelp
#        exit 0
#    elif [[ "$i" =~ "--bin=" ]] ; then
#        BINARY_NAME="`echo $i | sed 's/--bin=\(.*\)/\1/'`"
#    fi
#done

BINARY_NAME_POS=$((RUN_ARGS_SPECIFIED+1))
if [ $ARGS_LEFT -ge 1 ]; then
    BINARY_NAME=${@:BINARY_NAME_POS:1}
fi
BINARY_NAME_POS=$((BINARY_NAME_POS+1))
if [ $ARGS_LEFT -ge 2 ]; then
    MSERVER_ARGS=${@:BINARY_NAME_POS}
fi

#echo "TOTAL_ARGS_SPECIFIED $TOTAL_ARGS_SPECIFIED"
#echo "RUN_ARGS_SPECIFIED $RUN_ARGS_SPECIFIED"
#echo "ARGS_LEFT $ARGS_LEFT"
#echo "BINARY_NAME $BINARY_NAME"
#echo "MSERVER_ARGS $MSERVER_ARGS"

TARGET_ROOT="`pwd`"
if [[ $TARGET_ROOT =~ (.*/build_environment/target).* ]]; then
    TARGET_ROOT="${BASH_REMATCH[1]}"
    #auto-detecting branch (not hg branch, but netoptix_vms dir suffix)
    if [[ $TARGET_ROOT =~ .*netoptix_vms(.*)/build_environment/target ]]; then
        BRANCH_NAME="${BASH_REMATCH[1]}"
    fi
else
    TARGET_ROOT=$HOME/develop/netoptix_vms$BRANCH_NAME/build_environment/target
fi
PACKAGES_ROOT=$TARGET_ROOT/../../../buildenv/packages/linux-x64/

BIN_DIR=$TARGET_ROOT/bin/$CONFIGURATION/

if [ "`uname -s`" = "Darwin" ]; then
    export DYLD_LIBRARY_PATH=$TARGET_ROOT/lib/$CONFIGURATION/:$TARGET_ROOT/lib/:$PACKAGES_ROOT/quazip-0.7.1/lib:$PACKAGES_ROOT/qt-5.6.1/lib
else
    export LD_LIBRARY_PATH=$TARGET_ROOT/lib/$CONFIGURATION/:$TARGET_ROOT/lib/:$PACKAGES_ROOT/quazip-0.7.1/lib:$PACKAGES_ROOT/qt-5.6.1/lib
fi
export VMS_PLUGIN_DIR=$TARGET_ROOT/bin/$CONFIGURATION/plugins/

LOG_FILE=valgrind.log
ROOT_DIR=$HOME/mserver.data$BRANCH_NAME/
#ROOT_DIR=$HOME/mserver.data$BRANCH_NAME/

if [ "$BINARY_NAME" == "./mediaserver" ]; then
    if [ -z "$MSERVER_ARGS" ]; then
        MSERVER_ARGS="-e --conf-file=$ROOT_DIR/etc/mediaserver.conf --runtime-conf-file=$ROOT_DIR/etc/running_time.conf --log-level=DEBUG --msg-log-level=DEBUG"
    fi
fi

cd $BIN_DIR

LAUNCH_CMD="$BINARY_NAME $MSERVER_ARGS"
if [ ! -z "$STRACE" ]; then
    LAUNCH_CMD="strace -fo $STRACE_LOG $LAUNCH_CMD"
fi

COMMON_VALGRIND_ARGS="--num-callers=32 --error-limit=no --log-file=$LOG_FILE $LAUNCH_CMD"

while :
do
    echo "Running command '$LAUNCH_CMD'"

    if [ ! -z "$WITH_VALGRIND" ]; then
        #valgrind --leak-check=full --show-leak-kinds=all --vgdb=yes --vgdb-error=0 $COMMON_VALGRIND_ARGS
        valgrind --leak-check=full --show-leak-kinds=all --show-reachable=yes $COMMON_VALGRIND_ARGS
        #valgrind $COMMON_VALGRIND_ARGS
        #valgrind --tool=exp-dhat --show-top-n=10000 --sort-by=max-blocks-live $COMMON_VALGRIND_ARGS
        #valgrind --tool=exp-dhat --show-top-n=100 $COMMON_VALGRIND_ARGS
        #valgrind --tool=massif $COMMON_VALGRIND_ARGS
        #valgrind --tool=drd --exclusive-threshold=100 $COMMON_VALGRIND_ARGS
        #valgrind --tool=callgrind $LAUNCH_CMD
    elif [ ! -z "$WITH_GDB" ]; then
        gdb --args ./$BINARY_NAME $MSERVER_ARGS
    else
        $LAUNCH_CMD
    fi

    if [ -z "$LOOP" ] ; then
        break
    fi
    echo "!!!!!!! Waiting 5 seconds before retarting process !!!!!!!"
    sleep 5
done
