# This is a helper utility to generate list of all sub jobs in multijob

CUSTOMIZATIONS_LIST = ("default default_cn default_zh_CN cox "
                       "digitalwatchdog digitalwatchdog_global hanwha "
                       "ipera ionetworks nutech ras senturian systemk "
                       "tricom ust vista vmsdemoblue vmsdemoorange").split()
PLATFORMS_LIST = ("linux-x64 linux-x86 bananapi bpi rpi edge1 "
                  "tx1 android-arm windows-x64 windows-x86 mac ios").split()
print '''#
# DO NOT EDIT THIS TEMPLATE MANUALLY
# This configuration is autogenerated by helper script.
#
- job-template:
    name: '{pipeline}.{branch}.{project}.runner'
    project-type: multijob
    description: |
      Entry point

    node: runner
    concurrent: true


    properties:
    - heavy-job:
        weight: 1
    - throttle:
        max-total: 5
        option: project
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: 100

    parameters:
    - p_REQUESTED_BY
    # FIXME: Figure out why extended choice created from JJB is not visible..
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_PLATFORMS:
        default: '{default-platforms}'
    - p_CUSTOMIZATIONS:
        default: '{default-customizations}'
    - p_BUILD_WEBADMIN:
        default: true
    - p_BUILD_INSTALLER:
        default: true
    - p_RUN_UNITTESTS:
        default: true
    - p_RUN_FUNCTESTS:
        default: false
    - string:
        name: _NX_VMS_COMMIT
        default: '{branch}'
    - p_CLEAN_WORKSPACE
    - p_CLEAN_BUILD:
        default: false
    - p_CLEAN_CLONE

    wrappers:
    # NOTE: There is abug in jenkins: vars set here are read-only and can not be modified.
    - inject:
        properties-content: |
          BRANCH={branch}
          PIPELINE={pipeline}
    - timestamps
    # note: DO NOT ADD any timeouts here. Put them in corresponding child jobs.

    builders:
    - system-groovy:
        command: |
          def currentBuild = Thread.currentThread().executable
          def currentUrl = currentBuild.getUrl()
          def cause = currentBuild.getCause(hudson.model.Cause$UpstreamCause)
          def parentBuildNum = cause.upstreamBuild
          def parentJobName = cause.upstreamProject
          def parentJob = hudson.model.Hudson.instance.getItem(parentJobName)
          def jlc = new jenkins.model.JenkinsLocationConfiguration()
          def currentLink = "<a href='" + jlc.getUrl() + "/" + currentUrl.toString() + "'> to runner </a>"
          def parentBuild = parentJob.getBuildByNumber(parentBuildNum)
          def parentDescription = parentBuild.getDescription()
          parentBuild.setDescription(parentDescription + "<br>" + currentLink)

    - inject:
        properties-content: |
          BUILD_IDENTITY=undef
          NX_VMS_COMMIT=undef
    - multijob:
        name: Freeze nx commit
        projects:
        - name: 'helper.freeze-nx-vms-commit'
          kill-phase-on: FAILURE
          predefined-parameters: |
            REQUESTED_BY={tag_requested_by}
            BRANCH=$BRANCH
            PIPELINE=$PIPELINE
            NX_VMS_COMMIT=$_NX_VMS_COMMIT
            BUILD_DESCRIPTION=$BUILD_DESCRIPTION
    - copyartifact:
        project: 'helper.freeze-nx-vms-commit'
        filter: 'NX_VMS_COMMIT.envvar'
        which-build: last-completed
        parameter-filters: REQUESTED_BY={tag_requested_by}
    - inject:
        properties-file: 'NX_VMS_COMMIT.envvar'

    - multijob:
        name: Request new release build id
        projects:
        - name: '{pipeline}.build_number.generator'
          kill-phase-on: FAILURE
          predefined-parameters: |
            REQUESTED_BY={tag_requested_by}
            BUILD_DESCRIPTION=$BUILD_DESCRIPTION
    - copyartifact:
        project: '{pipeline}.build_number.generator'
        filter: 'BUILD_IDENTITY.envvar'
        which-build: last-completed
        parameter-filters: REQUESTED_BY={tag_requested_by}
    - inject:
        properties-file: 'BUILD_IDENTITY.envvar'

    # At this point we know BUILD_IDENTITY and NX_VMS_COMMIT
    # TODO: Should we fetch all links from publisher or something like that?
    - inject:
        properties-content: |
          REPOSITORY_ROOT_URL={artifact_repository_base_url}/{artifact_location_root_pattern}
          JUNKSHOP_URL={junkshop_base_url}/{junkshop_location_root_pattern}
    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
        macro: true

    - description-setter:
        description: |
          $PLATFORMS $CUSTOMIZATIONS for $NX_VMS_COMMIT ($_NX_VMS_COMMIT)
    - description-setter:
        description: |
          $BUILD_DESCRIPTION

    # TODO: we don't need to build webadmin for macOS. But it's not enough to disable it here
    # because artifact is mandatory in build installers.
    - multijob:
        name: Build web admin
        projects:
        - name: '{pipeline}.{branch}.{project}.webadmin.universal.build'
          enable-condition: >-
            ("$BUILD_WEBADMIN").toBoolean()
          kill-phase-on: FAILURE
          predefined-parameters: |
            BUILD_DESCRIPTION=$BUILD_DESCRIPTION
            BUILD_IDENTITY=$BUILD_IDENTITY
            NX_VMS_COMMIT=$NX_VMS_COMMIT
            CLEAN_WORKSPACE=$CLEAN_WORKSPACE
            CLEAN_BUILD=$CLEAN_BUILD
            CLEAN_CLONE=$CLEAN_CLONE
            RUNNER_URL=$BUILD_URL

    - multijob:
        name: Run all VMS distribution related jobs
        condition: COMPLETED # allow unstable
        projects:'''

for platform in PLATFORMS_LIST:
    for customization in CUSTOMIZATIONS_LIST:

        # below is template for skipping non-desired intersections.
        # if platform == "--1--" and customization == "--2--": continue

        if platform == "edge1" and customization != "digitalwatchdog":
            continue
        # TODO: ios and android have own release cycles and branches, need to extract in other project
        # if platform in ['ios', 'android-arm']:
        #     continue

        print '''
        - name: '{pipeline}.{branch}.{project}.installer.'''+platform+'''.'''+customization+'''.all'
          kill-phase-on: NEVER
          enable-condition: >-
            ("$PLATFORMS     ").trim().split(",").contains("'''+platform+'''") &&
            ("$CUSTOMIZATIONS").trim().split(",").contains("'''+customization+'''") &&
            ("$BUILD_INSTALLER").toBoolean()
          predefined-parameters: |
            BUILD_DESCRIPTION=$BUILD_DESCRIPTION
            BUILD_IDENTITY=$BUILD_IDENTITY
            NX_VMS_COMMIT=$NX_VMS_COMMIT
            CLEAN_WORKSPACE=$CLEAN_WORKSPACE
            CLEAN_BUILD=$CLEAN_BUILD
            CLEAN_CLONE=$CLEAN_CLONE
            RUN_UNITTESTS=$RUN_UNITTESTS
            RUNNER_URL=$BUILD_URL
'''
print '''
    - multijob:
        name: Run all VMS distribution functional tests
        projects:
'''

for customization in CUSTOMIZATIONS_LIST:
    print '''
        - name: '{pipeline}.{branch}.{project}.installer.'''+customization+'''.functest'
          condition: COMPLETED # allow unstable
          kill-phase-on: NEVER
          enable-condition: >-
            ("$CUSTOMIZATIONS").trim().split(",").contains("'''+customization+'''") &&
            ("$RUN_FUNCTESTS").toBoolean()
          predefined-parameters: |
            BUILD_DESCRIPTION=$BUILD_DESCRIPTION
            BUILD_IDENTITY=$BUILD_IDENTITY
            NX_VMS_COMMIT=$NX_VMS_COMMIT
            CLEAN_WORKSPACE=$CLEAN_WORKSPACE
            CLEAN_BUILD=$CLEAN_BUILD
            CLEAN_CLONE=$CLEAN_CLONE
            RUNNER_URL=$BUILD_URL
'''
print '''
    publishers:
    - groovy-postbuild:
        script: !include-raw-escape: ../builders/report_all_links.groovy
    - display-upstream-changes
    - archive:
        artifacts: '*.envvar'
        allow-empty: 'false'
        fingerprint: true
    - completed-email(group)
'''
