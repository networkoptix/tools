- project:
    name: release-pipeline-3.2

    project: vms

    branch: vms_3.2

    # SECTION. GLOBAL PIPELINE CONFIG
    # ============================================================

    # comma-separated list of emails to whom send notifications related to builds
    build-watchers: iremizov@networkoptix.com

    # block builds and wait for reporting job to report results
    synchronous-reporting: '' # false

    # Some cmake args are applicable for any builds they are applied at first
    # Run cmake -L / cmake -LH / cmake -LAH to see all configuration options
    cmake_configure_args_global: |
      CMAKE_EXECUTABLE=cmake
      CMAKE_ARG_beta=TRUE
      CMAKE_ARG_developerBuild=OFF
      CMAKE_ARG_cloudGroup=test
      CMAKE_ARG_rdepSync=ON
      CMAKE_ARG_customWebAdminPackageDirectory=$WORKSPACE/$WEBADMIN_COMPONENT_NAME
      # CMAKE_ARG_withTests=TRUE

    # SECTION. PIPELINE CONFIG
    # ============================================================

    pipeline:
    - release:
        # Pipeline-specific cmake arguments
        cmake_configure_args_pipeline:
          CMAKE_ARG_CMAKE_BUILD_TYPE=Release

    # SECTION. PLATFORM CONFIG
    # ============================================================

    # REMINDER: runner will not change list of subprojects when
    # extra items are added or removed, so don't forget to change runner
    # template according to changes made here
    platform:
    # there is also edge1 platform, it's declared and commented in jobs section
    - linux-x64:
        # most of builds are linux cross-builds that built on "build-installer-linux"
        # here we make an anchor to avoid typos and other kind of missconfiguration in future
        installer-build-node: &linux_node build-installer-linux
        # There are some CMake args that aplicable only for particular platform
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
    - linux-x86:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=linux-x86
    - bananapi:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=bananapi
          CMAKE_ARG_withTests=OFF
    - bpi:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=bpi
    - rpi:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=rpi
    # - tx1:
    #     installer-build-node: *linux_node
    #     cmake_configure_args_platform: |
    #       CMAKE_GENERATOR=Ninja
    #       CMAKE_ARG_targetDevice=tx1
    # + edge1

    # -- windows platform --
    # FIXME: HOME,PATH and other vars are represented as win env.
    # But some other vars are linux-like.
    # Rsync goes mad ain result and nothing works.
    - windows-x64: &windows_config
        installer-build-node: build-installer-windows
        cmake_configure_args_platform: |
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_GENERATOR=Visual Studio 15 2017 Win64
          CMAKE_ARG_beta=ON
          CMAKE_ARG_addQtPdb=ON
          CMAKE_ARG_trustedTimestamping=OFF
          CMAKE_ARG_withClouds=OFF
          CMAKE_ARG_withPluginStubs=OFF
          CMAKE_ARG_withTests=ON
          CMAKE_TOOL=host=x64

    - windows-x86:
        <<: *windows_config
        cmake_configure_args_platform: |
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_GENERATOR=Visual Studio 15 2017
          CMAKE_ARG_addQtPdb=ON
          CMAKE_ARG_trustedTimestamping=OFF
          CMAKE_ARG_withClouds=OFF
          CMAKE_ARG_withPluginStubs=OFF
          CMAKE_ARG_withTests=ON

    # -- apple platform --

    - mac: &osx_config
        installer-build-node: build-installer-mac
        use-webadmin: false
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_beta=ON
          CMAKE_ARG_codeSigning=OFF

    # SECTION. CUSTOMIZATION CONFIG
    # ============================================================

    # TODO: There are some customization that may be build only on specific platform
    # there is no need to generate extra set of jobs that never gonna be triggered.
    # it looks like there are too few customization spec. cmake args and we may move such
    # rare customizations to platform enum.

    cmake_configure_args_customization: |
      CMAKE_ARG_customization=$CUSTOMIZATION

    customization:

    # TODO: Enable later when we'll be ready to test it.

    # REMINDER: runner will not change list of subprojects when
    # extra items are added or removed, so don't forget to change runner
    # template according to changes made here
    - default
    # - default_cn
    # - default_zh_CN
    # - cox
    # - digitalwatchdog
    # - digitalwatchdog_global
    - hanwha
    # - ipera
    # - ionetworks
    # - nutech
    # - ras
    # - senturian
    # - systemk
    # - tricom
    # - ust
    - vista
    # - vmsdemoblue
    # - vmsdemoorange
    # + digitalwatchdog

    # list of jobs to generate
    jobs:

    # TRIGGERS - main entry points

    - '{pipeline}.{branch}.{project}.trigger.{preset}':
        preset:
        - example:
            detailed-job-description: |-
              This trigger serves for demo purposes and will be removed in future
            default-build-description: >-
              Manually triggered build
            platforms: linux-x64,linux-x86
            customizations: default,hanwha
        - nightly:
            detailed-job-description: |-
              This trigger serves for nigtly clean builds to verify the state of product
              It builds with corresponding schedule "{timer}".

              It should not be triggered manually excluding debugging of infra problems
              associated with only this trigger type.
            default-build-description: >-
              Nightly clean build for all platforms and customizations
              triggered automatically by timer
            platforms: linux-x64,linux-x86,bananapi,windows-x86,windows-x64,mac,edge1,bpi,rpi,tx1,edge1
            customizations: default,hanwha,vista,digitalwatchdog
            clean-build: true
            timer: '0 0 * * *'

        - custom:
            detailed-job-description: |-
              This trigger serves for custom builds.
              For example, you may want to verify that Jenkins works properly and can
              successfully rebuild some successful build.
            default-build-description: >-
              Manually triggered
            platforms: linux-x64,windows-x64,mac,bpi
            customizations: default
            freeze-commit-now: true

    # RUNNER - root launcher of all builds

    - '{pipeline}.{branch}.{project}.runner':
        default-platforms: linux-x64,linux-x86,windows-x86
        default-customizations: default,hanwha

    # BUILD AND TEST - main jobs

    - '{pipeline}.{branch}.{project}.webadmin.universal.build'
    - '{pipeline}.{branch}.{project}.installer.{platform}.{customization}.all'
    - '{pipeline}.{branch}.{project}.installer.{platform}.{customization}.build'
    # Edge1 is a platform that's exclusive for digitalwatchdog.
    # add extra jobs for edge1 with digitalwatchdog customization
    - '{pipeline}.{branch}.{project}.installer.{platform}.{customization}.all': &extra-edge1-platform
        platform:
        - edge1:
            installer-build-node: *linux_node
            cmake_configure_args_platform: |
              CMAKE_GENERATOR=Ninja
              CMAKE_ARG_targetDevice=edge1
        customization:
        - 'digitalwatchdog'
    - '{pipeline}.{branch}.{project}.installer.{platform}.{customization}.build':
        <<: *extra-edge1-platform

    # Our tests work per-customization per-platform and not yet implemented
    # for all platforms, so list of jobs is reduced
    # - 'installer-unittests-default':
    #     # TODO: Rework a bit this parameterization as well as probably build node parameterization
    #     platform:
    #     - linux-x86:
    #         unittest-node: unittests-linux
    #     - linux-x64:
    #         unittest-node: unittests-linux
    #     customization:
    #     - default
    # - installer-unittests-windows:
    #     platform:
    #     - windows-x64:
    #         unittest-node: unittests-windows
    #     - windows-x86:
    #         unittest-node: unittests-windows
    #     customization:
    #     - default

