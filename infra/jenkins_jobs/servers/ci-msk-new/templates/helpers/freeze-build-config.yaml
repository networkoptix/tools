- job-template:
    name: 'helper.freeze-build-config'
    job-maintainers: 'iremizov@networkoptix.com'
    description: |
      <pre>
      ================================================================================
      Freeze build configuration identity
      ================================================================================

      JOB MAINTAINERS
        {job-maintainers}
        (notified by email on build failures)

      SOURCES
        devtools/infra/jenkins_jobs/servers/templates/helpers/freeze-build-config.yaml

      --------------------------------------------------------------------------------

      This job provides shasum for build configuration files.
      In build workspace one may compare "old" shasum calculated for sources of prev.
      build located in build workspace with "new" shasum calculated for sources for
      requested build.
      If shasums don't differ then incremental build is possible. otherwise all files
      from build dir should be removed.

      Example

      commit_hash_1 -> shasum_A -> build_1
      commit_hash_2 -> shasum_A -> build_2
      commit_hash_3 -> shasum_B -> build_3

      If in current build dir we have any build that have shasum_A and we want to
      build commit_hash_2 incrementally, then it's possible because it's hash is
      shasum_A. But it's impossible to build incrementally commit_hash_3 because it
      produces shasum_B that differs from shasum_A

      Shasum of build files is available in BUILD_CONFIG_SHA.envvar file represented
      in Jenkins envvar format (Var name, equals and var value not enclosed in quotes).

      Every build is connected with upstream builds by Jenkins internals, but due to
      some internal limitations it's recommended to use REQUESTED_BY argument.
      Trigger builds with some unique marker like $JOB_NAME-$BUILD_ID and then query
      latest artifact that has REQUESTED_BY equal to marker.

      --------------------------------------------------------------------------------
      </pre>

    # all build triggers will work under the same workspace as well as
    node: '{hg-local-cache-node}'
    workspace: '{hg-local-cache-node-workspace}'
    concurrent: false

    properties:
    - heavy-job:
        weight: 1
    - throttle:
        option: category
        max-total: 1
        categories:
        - '{hg-local-cache-node-throttle-category}'
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: 100

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_PIPELINE
    - p_BRANCH
    - p_CUSTOMIZATION
    - p_PLATFORM
    - p_REQUESTED_BY
    - p_CLEAN_CLONE
    - p_NX_VMS_COMMIT:
        default: ''

    wrappers:
    # NOTE: There is abug in jenkins: vars set here are read-only and can not be modified.
    - inject:
        properties-content: |
          JOB_MAINTAINERS={job-maintainers}
    - timestamps
    - timeout:
        # normally should complete in 2-5 min
        timeout: 20 # min
        fail: true
        type: absolute

    scm:
    - hg-la-no-changelog:
        project-name: nx_vms
        branch-name: '$NX_VMS_COMMIT'
    - hg-la-no-changelog:
        project-name: devtools
        branch-name: default

    builders:

    - description-setter:
        description: |
          $BUILD_DESCRIPTION

    - shell: |
        #!/bin/bash
        set -ex

        case $PLATFORM in
          linux-x64|linux-x86|rpi|bpi|bananapi|mac|ios)
            function find_all_files() {{
              echo "Will ignore changes in vcxproj as it's used only for windows and not for ${{PLATFORM}}"

              find "nx_vms" -type f -and \( -name 'CMakeLists.txt' -or -name '*.cmake' -or -wholename '**/build_utils/**' \)
            }}
            ;;
          *)
            function find_all_files() {{
              echo "Will include changes in vcxproj (used for windows), current ${{PLATFORM}} is not exceptional"
              find "nx_vms" -type f -and \( -name 'CMakeLists.txt' -or -name '*.vcxproj' -or -name '*.cmake' -or -wholename '**/build_utils/**' \)
            }}
            ;;
        esac

        echo "BUILD_CONFIG_SHA will be based on files"
        find_all_files

        echo "BUILD_CONFIG_SHA=$( find_all_files | xargs cat | shasum -a 256 | cut -f 1 -d " ")" > 'BUILD_CONFIG_SHA.envvar'
    - inject:
        properties-file: BUILD_CONFIG_SHA.envvar
    - description-setter:
        description: |
          $BUILD_CONFIG_SHA

    publishers:
    - publisher-set-build-name:
        name: '#$BUILD_ID $BRANCH@$NX_VMS_COMMIT'
    - archive:
        artifacts: 'BUILD_CONFIG_SHA.envvar'
        allow-empty: 'false'
        fingerprint: true
    - failure-email-helpers(maintainers)