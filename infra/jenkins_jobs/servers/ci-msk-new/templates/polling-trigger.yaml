- job-template:
    name: '{pipeline}.{version}.{project}.trigger.{preset}'
    id: polling-trigger
    description: |
      <pre>
      ================================================================================
      Build Trigger
      ================================================================================

      JOB MAINTAINERS
        {job-maintainers}
        (NOT notified by email on build failures)

      SOURCES
        devtools/infra/jenkins_jobs/servers/templates/build-trigger.yaml

      --------------------------------------------------------------------------------

      This job serves for starting bunch of builds associated with particular commit
      in nx_vms repository and also assigned build identity.

      By default (e.g. triggered automatically) it will build following installers
      {platforms}
      {customizations}

      There are some different triggers available.
      See all triggers on {jenkins_host}/view/triggers/

      {detailed-job-description}

      See more details on build procedure in corresponding downstream "*.runner" job

      Note, that this job doesn't wait for downstream build completion.
      Find your build in crsp build queue

      --------------------------------------------------------------------------------
      </pre>
    # all build triggers will work under the same workspace as well as
    node: '{hg-local-cache-node-write}'
    workspace: '{hg-local-cache-node-workspace}'
    concurrent: false

    timer: ''  # no timed trigger by default
    poll-scm-timer: '* * * * *'
    clean-workspace: '' # false by default
    clean-build: '' # false by default
    default-build-description: ''
    build-webadmin: true
    build-installer: true
    run-functests: '' # false
    run-unittests: true
    run-realcameratests: '' # false

    ignore-functests: 'false' #
    # detailed-job-description required!

    properties:
    - authorization-{pipeline}-system
    - heavy-job:
        weight: 1
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default-artifact-num-to-keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: '{default-build-description}'
    - simple-separator:
        header: Build parameters
    - p_CLEAN_WORKSPACE:
        default: '{clean-workspace}'
    - p_CLEAN_BUILD:
        default: '{clean-build}'
    - p_PLATFORMS:
        default: '{platforms}'
    - p_CUSTOMIZATIONS:
        default: '{customizations}'
    - p_BUILD_WEBADMIN:
        default: '{build-webadmin}'
    - p_BUILD_INSTALLER:
        default: '{build-installer}'
    - p_RUN_UNITTESTS:
        default: '{run-unittests}'
    - p_RUN_FUNCTESTS:
        default: '{run-functests}'
    - p_RUN_REALCAMERATESTS:
        default: '{run-realcameratests}'
    - administrative-section-separator
    - string:
        name: IGNORE_FUNCTESTS_COMMITS
        default: '{ignore-functests}'
    - p_BRANCH:
        default: '{default-branch}'


    triggers:
    - timed: "{timer}"
    - pollscm:
        cron: "{poll-scm-timer}"
        ignore-post-commit-hooks: True

    wrappers:
    - timestamps
    - timeout:
        # normally should complete in <1 min, but in case of clean clone this may not work
        # if there is no repo cloned yet, copy/clone it manually or change timeout
        timeout: 5 # min
        fail: true
        type: absolute

    scm:
    - hg-la:
        project-name: nx_vms
        branch-name: $BRANCH

    builders:
    - inject:
        properties-content: |
          PIPELINE={pipeline}
    - inject:
        properties-content: |
          JUNKSHOP_HOST={junk_shop_host}
          JUNKSHOP_DB_HOST={junkshop_db_host}
    - inject:
        properties-content: |
          JUNKSHOP_PROJECT_NAME={junkshop_project_name}
          JUNKSHOP_BASE_URL=http://$JUNKSHOP_HOST
    - inject:
        properties-content: |
          JUNKSHOP_URL=$JUNKSHOP_BASE_URL/{junkshop_location_root_pattern}
    - set-custom-build-description

    - freeze-nx-vms-commit(local):
        commit-to-freeze: $MERCURIAL_REVISION_SHORT
        commit-varname: NX_VMS_COMMIT

    # load old commit sha
    - get-old-envvar:
        varname: NX_VMS_COMMIT
        which-build: last-successful
        optional: true

    # Next, decide whether we should start runner ...
    # Jenkins does not support excluded-regions for hg and bazaar
    # That's why we manually check that if source files changed..
    - shell: |
        #!/bin/bash
        # Defaults to trigger
        echo "SHOULD_TRIGGER=true" > SHOULD_TRIGGER.envvar

    # TODO: remove copy-paste
    - shell: |
        #!/bin/bash
        set -ex

        # Note that if you want to add other conditions, e.g.
        # patch didn't affect 2 folders, you need to change this logic and calculate
        # exact files changed instead of lines in diff

        pushd nx_vms
          echo "Changes in nx_vms:"
          hg diff --stat -r "${{NX_VMS_COMMIT}}:${{NX_VMS_COMMIT_OLD}}" .
          total_changed="$(hg diff --stat -r "${{NX_VMS_COMMIT}}:${{NX_VMS_COMMIT_OLD}}" . | wc -l)"
          echo "total ${{total_changed}}"

          pushd func_tests
            echo "Changes in nx_vms/func_tests:"
            hg diff --stat -r "${{NX_VMS_COMMIT}}:${{NX_VMS_COMMIT_OLD}}" .
            func_tests_changed="$(hg diff --stat -r "${{NX_VMS_COMMIT}}:${{NX_VMS_COMMIT_OLD}}" . | wc -l)"
            echo "total ${{func_tests_changed}}"
          popd

        popd

        if [ "$IGNORE_FUNCTESTS_COMMITS" != "false" ] ; then
          if [ "${{total_changed}}" == "${{func_tests_changed}}" ] ; then
            echo "Ignore changeset because only func_tests are changed."
            echo "SHOULD_TRIGGER=false" > SHOULD_TRIGGER.envvar
          fi
        fi

    # finally inject
    - inject:
        properties-file: SHOULD_TRIGGER.envvar

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '${{SHOULD_TRIGGER}}'
        condition-string2: 'false'
        steps:
        - description-setter:
            description: |
              RUNNER IS NOT TRIGGERED

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '${{SHOULD_TRIGGER}}'
        condition-string2: 'true'
        steps:
        # We don't use multijob to hide dependency graph from trigger because graph
        # is too big and takes a while to be loaded
        # Anyway this graph is available in runner
        - trigger-builds:
          - project: '{pipeline}.{version}.{project}.runner'
            predefined-parameters: |
              REQUESTED_BY={tag_requested_by}
              UPSTREAM_JOB_NAME=$JOB_NAME
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              BUILD_WEBADMIN=$BUILD_WEBADMIN
              BUILD_INSTALLER=$BUILD_INSTALLER
              RUN_UNITTESTS=$RUN_UNITTESTS
              RUN_FUNCTESTS=$RUN_FUNCTESTS
              RUN_REALCAMERATESTS=$RUN_REALCAMERATESTS
              PLATFORMS=$PLATFORMS
              CUSTOMIZATIONS=$CUSTOMIZATIONS
              BRANCH=$BRANCH
              USE_NX_VMS_COMMIT=$NX_VMS_COMMIT
              USE_BUILD_IDENTITY=NEW
              CLEAN_WORKSPACE=$CLEAN_WORKSPACE
              CLEAN_BUILD=$CLEAN_BUILD
            block: false # !! don't wait
            block-thresholds:
              failure-threshold: FAILURE

    publishers:
    - publisher-set-build-name:
        name: '#$BUILD_ID $BRANCH@$NX_VMS_COMMIT'
    - archive:
        artifacts: '*.envvar'
        allow-empty: 'false'
        fingerprint: true
    - failure-email-helpers(maintainers):
        email-recipients: '{job-maintainers}'
