- job-template:
    name: '{pipeline}.{branch}.vms.installer.{platform}.{customization}.build'

    node: '{installer-build-node}'
    workspace: '{workspace}'
    concurrent: true

    synchronous-reporting: '' # false
    webadmin-component-name: 'server-external'
    webadmin-platform: universal
    webadmin-customization: default

    cmake-executable: cmake
    custom-cleaner-log: '{build-dir}/cleaner.log'
    cmake-configure-log: 'cmake-configure-{customization}.log'
    cmake-build-log: 'cmake-build-{customization}.log'
    build-dir: build

    build-artifacts: 'distrib/,bin/,lib/,current_config.py,build_info.txt,{cmake-build-log},{cmake-configure-log}'
    build-artifacts-min: '{build-dir}/*.log'
    properties:
    - heavy-job:
        weight: 1
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: 100

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_CLEAN_WORKSPACE
    - p_CLEAN_CLONE
    - p_CLEAN_BUILD:
        default: false
    - p_BUILD_IDENTITY
    - p_NX_VMS_COMMIT:
        default: '{branch}'

    wrappers:
    - inject:
        properties-content: |
          PIPELINE={pipeline}
          CUSTOMIZATION={customization}
          PLATFORM={platform}
          BRANCH={branch}
    - timestamps
    - timeout:
        # normally, should complete in 7-30 min
        timeout: 60 # min
        fail: true
        type: absolute
    - workspace-cleanup:
        check-parameter: CLEAN_WORKSPACE

    # STAGE: PRE-SCM
    # ========================================

    - pre-scm-buildstep:
        failOnError: true
        buildsteps:
        - copy-hg-repo:
            name: nx_vms
        - copy-hg-repo:
            name: devtools

    # STAGE: SCM
    # ========================================

    scm:
    - '{hg-pull-macro}':
        project-name: devtools
        branch-name: default
    - '{hg-pull-macro}':
        project-name: nx_vms
        branch-name: $NX_VMS_COMMIT

    builders:
    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
        macro: true

    # STAGE: CLEANUP
    # ========================================

    # Optionally remove entire build directory
    - conditionally-clean-dir:
        condition-varname: CLEAN_BUILD
        dir: build

    # Unconditionally ensure that all artifacts that may be left in workspace after
    # any previous build process are removed

    # Remove CMake caches
    - file-delete-operation:
        includes: build/CMakeCache.txt
        excludes: ''

    # Remove any logs located in build dir since build dir is shared across customizations
    - file-delete-operation:
        includes: '{build-artifacts-min}'
        excludes: ''

    # Remove distrib folder
    - folder-delete-operation:
        folder-path: '{build-dir}/distrib'

    # Run custom cleaner provided by development team
    # TODO: display content of file
    - conditional-step:
        condition-kind: file-exists
        condition-filename: '{custom_cleaner_path}'
        condition-basedir: workspace
        steps:
        - run-process:
            workdir: '$WORKSPACE/{build-dir}'
            executable: python
            executable-is-relpath: 'false'
            arguments: '{custom_cleaner_path},--build-dir,$WORKSPACE/{build-dir}'
            logfile: '{custom-cleaner-log}'
            inherit-environ: 'true'
            environ: ''

    # STAGE: SETUP BUILD ENVIRONMENT
    # ========================================

    # Create build folder
    # TODO: Check that condition is really needed
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: file-exists
          condition-filename: '{build-dir}'
          condition-basedir: workspace
        steps:
        - folder-create-operation:
            folder-path: '{build-dir}'

    - folder-delete-operation:
        folder-path: '$WORKSPACE/{webadmin-component-name}'

    - trigger-builds:
      - project: 'helper.pull-component'
        predefined-parameters: |
          BUILD_IDENTITY=$BUILD_IDENTITY
          SSH_USER=$USER
          LOCAL_PATH=$WORKSPACE/
          PLATFORM={webadmin-platform}
          CUSTOMIZATION={webadmin-customization}
          COMPONENTS={webadmin-component-name}/
          NODE_SSH_CONNECTION=$SSH_CONNECTION
        block: true
        block-thresholds:
          failure-threshold: FAILURE

    # STAGE: BUILD
    # ========================================

    - inject:
        properties-content: |
          REPOSITORY_URL={artifact_repository_base_url}/{artifact_location_full_pattern}
          JUNKSHOP_URL={junkshop_base_url}/{junkshop_location_root_pattern}
    - inject:
        properties-content: |
          {cmake_configure_args_global}
    - inject:
        properties-content: |
          {cmake_configure_args_pipeline}
    - inject:
        properties-content: |
          {cmake_configure_args_platform}
    - inject:
        properties-content: |
          {cmake_configure_args_customization}
    - inject:
        properties-content: |
          CMAKE_ARG_customWebAdminPackageDirectory=$WORKSPACE/{webadmin-component-name}
          CMAKE_ARG_buildNumber=$BUILD_IDENTITY
          CMAKE_SOURCEDIR=$WORKSPACE/nx_vms
          CMAKE_ENV_environment=$WORKSPACE
    - inject:
        properties-content: |
          WORKDIR=$WORKSPACE/{build-dir}
          EXECUTABLE={cmake-executable}
          EXECUTABLE_IS_RELPATH=false
          LOGFILE=build/{cmake-configure-log}
          CMAKE_ENV_PATH=$PATH
    - groovy:
        version: '{groovy-version}'
        command: !include-raw-escape: ../builders/cmake_configure_wrapper.groovy

    # Build
    - inject:
        properties-content: |
          WORKDIR=$WORKSPACE/{build-dir}
          EXECUTABLE={cmake-executable}
          CMAKE_BUILD_THREADS=20
          LOGFILE=build/{cmake-build-log}
          CMAKE_ENV_NINJA_STATUS="[%s/%t] %es "
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_ENV_environment=$WORKSPACE
          CMAKE_ENV_PATH=$PATH
    - groovy:
        version: '{groovy-version}'
        command: !include-raw-escape: ../builders/cmake_build_wrapper.groovy

    # STAGE: PUBLISH
    # ========================================

    publishers:
    - archive:
        artifacts: '{build-artifacts-min}'
        allow-empty: 'false'
        fingerprint: true

    # TODO: publish into other repo than default when build is failed
    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          - UNSTABLE
          - FAILURE
          - NOT_BUILT
          - ABORTED
          build-steps:
          - trigger-builds:
            - project: 'helper.push-component'
              predefined-parameters: |
                BUILD_IDENTITY=$BUILD_IDENTITY
                PLATFORM=$PLATFORM
                CUSTOMIZATION=$CUSTOMIZATION
                LOCAL_PATH=$WORKSPACE/{build-dir}/
                COMPONENTS={build-artifacts}
                NODE_SSH_CONNECTION=$SSH_CONNECTION
                SSH_USER=$USER
              block: true
              block-thresholds:
                failure-threshold: FAILURE
          # TODO: descriptions should differ for failed and successful builds
          - description-setter:
              description: >-
                $BUILD_DESCRIPTION
                <a href='$REPOSITORY_URL'> Artifacts </a>,
                <a href='$JUNKSHOP_URL'> Junkshop </a>

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.build-reporter'
              block: '{synchronous-reporting}'
              predefined-parameters: |
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_IDENTITY=$BUILD_IDENTITY
                PLATFORM=$PLATFORM
                CUSTOMIZATION=$CUSTOMIZATION
                BUILD_STATUS=passed
                LOGFILE={cmake-build-log}
    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - FAILURE
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.build-reporter'
              block: '{synchronous-reporting}'
              predefined-parameters: |
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_IDENTITY=$BUILD_IDENTITY
                PLATFORM=$PLATFORM
                CUSTOMIZATION=$CUSTOMIZATION
                BUILD_STATUS=failed
                LOGFILE={cmake-build-log}

    - failure-email:
        email-recipients: '{build-watchers}'
    - fixed-email:
        email-recipients: '{build-watchers}'