- job-template:
    name: '{pipeline}.{branch}.{project}.distribution.{platform}.{customization}.build'
    description: |
      <pre>
      ================================================================================
      Build Installer for {platform} with {customization} customization
      ================================================================================

      JOB MAINTAINERS
        {job-maintainers}
        (NOT notified by email on build failures)
      BUILD WATCHERS
        {build-watchers}
        (notified by email on build failures)

      SOURCES
        devtools/infra/jenkins_jobs/servers/templates/installer-build.yaml

      --------------------------------------------------------------------------------

      This job builds installer that also includes webadmin binaries with small
      exception for few platforms where there is no webserver included into installer
      (this case is not handled yet by this job)

      --------------------------------------------------------------------------------

      This job consumes few groups of parameters.

      Parameters related to workspace cleaning logic
      * CLEAN_WORKSPACE
      * CLEAN_CLONE
      * CLEAN_BUILD

      Parameters related to pointing artifacts in repository and development process
      * BUILD_IDENTITY (that determines release id or build_number used for releases)
      * NX_VMS_COMMIT exact commit of sources taht produced this build.

      --------------------------------------------------------------------------------
      </pre>
    node: '{installer-build-node}'
    # NOTE: There is a bug in our build framework that has regex like '_{platform}' therefore
    # '_{platform}' combination is unallowed
    workspace: 'nx_build_thr${{EXECUTOR_NUMBER}}-{pipeline}-{platform}-{branch}/'
    concurrent: true

    synchronous-reporting: '' # false

    use-webadmin: 'true' # defaults to build installer that requires webadmin
    webadmin-component-name: 'server-external'
    webadmin-platform: universal
    webadmin-customization: default

    cmake-executable: cmake
    custom-cleaner-log: 'cleaner.log'
    cmake-configure-log: 'cmake-configure.log'
    cmake-build-log: 'cmake-build.log'
    build-dir: build

    build-artifacts: 'build_logs/,distrib/,bin/,lib/,current_config.py,build_info.txt,cmake-build.log,cmake-configure.log'
    build-artifacts-min: 'build/**/*.log'

    # Currently there is custom cleaner file in mobile branches (and all branches where mobile is merged)
    # It's main purpose as of 21.06.2016 is to clean all built icons. The idea is that icons from one customization
    # must not be present while we are building other customization.
    # To simplify things we execute this file when it's present in workspace (see below)
    # anyways it's possible to override this file for other use cases.
    custom_cleaner_path: '$WORKSPACE/nx_vms/build_utils/python/clear_cmake_build.py'

    cmake_build_args_generator: ''

    properties:
    - heavy-job:
        weight: 1
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default-artifact-num-to-keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_CLEAN_WORKSPACE:
        default: false
    - p_CLEAN_CLONE
    - p_CLEAN_BUILD:
        default: false
    - p_BUILD_IDENTITY
    - p_NX_VMS_COMMIT:
        default: '{branch}'
    - p_RUNNER_URL

    wrappers:
    # NOTE: There is a bug in jenkins: vars set here are read-only and can not be modified.
    - inject:
        properties-content: |
          PIPELINE={pipeline}
          BRANCH={branch}
          CUSTOMIZATION={customization}
          PLATFORM={platform}
          USE_WEBADMIN={use-webadmin}
          WEBADMIN_COMPONENT_NAME={webadmin-component-name}

    - timestamps
    - timeout:
        # normally, should complete in 7-30 min
        timeout: 90 # min
        fail: true
        type: absolute
    - workspace-cleanup:
        check-parameter: CLEAN_WORKSPACE

    # STAGE: PRE-SCM
    # ========================================

    - pre-scm-buildstep:
        failOnError: true
        buildsteps:
        - import-hg-repo(if-missing):
            name: nx_vms
            branch: '{branch}'
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            basedir: $WORKSPACE
        # this is an ugly huck to finally close the problem with long filenames in devtools
        - folder-delete-operation:
            folder-path: 'devtools'
        - import-hg-repo(if-missing):
            name: devtools
            branch: default
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            basedir: $WORKSPACE

    # STAGE: SCM
    # ========================================

    scm:
    - hg-local:
        name: nx_vms
        revision: '$NX_VMS_COMMIT'

    builders:
    - inject:
        properties-content: |
          JUNKSHOP_HOST={junk_shop_host}
          JUNKSHOP_DB_HOST={junkshop_db_host}
    - inject:
        properties-content: |
          JUNKSHOP_PROJECT_NAME={junkshop_project_name}
          JUNKSHOP_BASE_URL=http://$JUNKSHOP_HOST
    - inject:
        properties-content: |
          JUNKSHOP_URL=$JUNKSHOP_BASE_URL/{junkshop_location_full_pattern}
    - set-custom-build-description
    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
        macro: true

    # At first, calculate sha for build config files
    # since this job is crossplatform it's safer to just trigger freeze commit
    # with linux executor than try to inplement cross-platform stuff

    # STAGE: CLEANUP
    # ========================================

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '{force-clean-build-based-on-build-configs-sha}'
        condition-string2: 'YES'
        steps:
        - trigger-builds:
          - project: 'helper.freeze-build-config'
            block: true
            predefined-parameters: |
              REQUESTED_BY={tag_requested_by}
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              PIPELINE=$PIPELINE
              BRANCH=$BRANCH
              CUSTOMIZATION=$CUSTOMIZATION
              PLATFORM=$PLATFORM
              BUILD_IDENTITY=$BUILD_IDENTITY
              NX_VMS_COMMIT=$NX_VMS_COMMIT
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION

        # Inject commit sha
        - copyartifact:
            project: 'helper.freeze-build-config'
            filter: 'BUILD_CONFIG_SHA.envvar'
            which-build: last-completed
            parameter-filters: REQUESTED_BY={tag_requested_by}
        - inject:
            properties-file: 'BUILD_CONFIG_SHA.envvar'

        # When there is no information related to prev build config
        # We will force to clean build dir
        - conditional-step:
            condition-kind: not
            condition-operand:
              condition-kind: file-exists
              condition-filename: 'BUILD_CONFIG_SHA_OLD.envvar'
              condition-basedir: workspace
            steps:
            - description-setter:
                description: |
                  Clean build is forced by missing BUILD_CONFIG_SHA_OLD.envvar
            - folder-delete-operation:
                folder-path: 'build'

        # Once we have some info regarding oldbuild config, we'll check that
        # incremental build is applicable, if not, again remove build folder
        - conditional-step:
            condition-kind: file-exists
            condition-filename: 'BUILD_CONFIG_SHA_OLD.envvar'
            condition-basedir: workspace
            steps:
            - inject:
                properties-file: BUILD_CONFIG_SHA_OLD.envvar
            - conditional-step:
                condition-kind: not
                condition-operand:
                    condition-kind: strings-match
                    condition-string1: "${{BUILD_CONFIG_SHA}}"
                    condition-string2: "${{BUILD_CONFIG_SHA_OLD}}"
                steps:
                - description-setter:
                    description: >-
                        Clean build is forced by changed BUILD_CONFIG_SHA,
                        $BUILD_CONFIG_SHA_OLD -> $BUILD_CONFIG_SHA
                - folder-delete-operation:
                    folder-path: 'build'

    # Optionally when special flag is set, we also remove build directory
    - conditional-step:
        condition-kind: boolean-expression
        condition-expression: '${{ENV,var="CLEAN_BUILD"}}'
        steps:
        - description-setter:
            description: |
              Clean build is forced by CLEAN_BUILD var ( $CLEAN_BUILD )
        - folder-delete-operation:
            folder-path: 'build'
        - folder-delete-operation:
            folder-path: 'packages'

    # create build dir if not exists or removed
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: file-exists
          condition-filename: 'build'
          condition-basedir: workspace
        steps:
        - folder-create-operation:
            folder-path: 'build'

    # Once we completed checks related to CMakeLists.txt, store new value
    - file-create-operation:
        file-name: BUILD_CONFIG_SHA_OLD.envvar
        file-content: BUILD_CONFIG_SHA_OLD=${{BUILD_CONFIG_SHA}}

    # Unconditionally ensure that all artifacts that may be left in workspace after
    # any previous build process are removed

    # Remove CMake caches
    - file-delete-operation:
        includes: build/CMakeCache.txt
        excludes: ''

    # Remove any logs located in build dir since build dir is shared across customizations
    - file-delete-operation:
        includes: '{build-artifacts-min}'
        excludes: ''

    # Remove distrib folder
    - folder-delete-operation:
        folder-path: '{build-dir}/distrib'

    # Run custom cleaner provided by development team
    - conditional-step:
        condition-kind: file-exists
        condition-filename: '{custom_cleaner_path}'
        condition-basedir: workspace
        steps:
        - shell: |
            #!bash
            set -ex

            cd "${{WORKSPACE}}/{build-dir}"
            if [ -f "{custom_cleaner_path}" ] ; then
              echo "will run {custom_cleaner_path} with content"
              cat "{custom_cleaner_path}"
              SECONDS=0
              # Log file must not exist
              rm -f "{custom-cleaner-log}" # TODO: remove it in prep env
              test ! -f "{custom-cleaner-log}"
              python "{custom_cleaner_path}" --build-dir "${{WORKSPACE}}/{build-dir}" 2>&1 | tee "{custom-cleaner-log}"
              ec="${{PIPESTATUS[0]}}"
              echo "Took $SECONDS seconds"
              # Abort if first cmd in pipe failed
              test "X${{ec}}" == "X0"
            fi

    # STAGE: SETUP BUILD ENVIRONMENT
    # ========================================

    # Create build folder
    - shell: |
        #!bash
        set -ex
        mkdir -p '{build-dir}'
        rm -rf "$WORKSPACE/$WEBADMIN_COMPONENT_NAME"

    - conditional-step:
        condition-kind: boolean-expression
        # pull webadmin only when needed
        condition-expression: '${{ENV,var="USE_WEBADMIN"}}'
        steps:
        - trigger-builds:
          - project: 'helper.pull-component'
            predefined-parameters: |
              REQUESTED_BY={tag_requested_by}
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              PIPELINE=$PIPELINE
              BRANCH=$BRANCH
              BUILD_IDENTITY=$BUILD_IDENTITY
              CUSTOMIZATION={webadmin-customization}
              PLATFORM={webadmin-platform}
              COMPONENTS=$WEBADMIN_COMPONENT_NAME/
              SSH_USER=$USER
              LOCAL_PATH=$WORKSPACE/
              NODE_SSH_CONNECTION=$SSH_CONNECTION
            block: true
            block-thresholds:
              failure-threshold: FAILURE

    # STAGE: BUILD
    # ========================================

    - shell: |
        #!bash
        set -ex

        # FIXME: deprecated
        export environment=$WORKSPACE

        cd "{build-dir}"

        SECONDS=0
        echo "Configuring project"
        # Log file must not exist
        rm -f "{cmake-configure-log}" # TODO: remove it in prep env
        test ! -f "{cmake-configure-log}"
        cmake {cmake_configure_args_global} \
              {cmake_configure_args_pipeline} \
              {cmake_configure_args_platform} \
              {cmake_configure_args_customization} \
              -DbuildNumber=$BUILD_IDENTITY \
              -DcustomWebAdminPackageDirectory=$WORKSPACE/$WEBADMIN_COMPONENT_NAME \
              $WORKSPACE/nx_vms 2>&1 | tee "{cmake-configure-log}"
        ec="${{PIPESTATUS[0]}}"
        echo "Took $SECONDS seconds"
        # Abort if first cmd in pipe failed
        test "X${{ec}}" == "X0"

        if [ "{use-ninja-clean-file}" == 'YES' ] ; then
          cleaner="${{WORKSPACE}}/devtools/ninja_clean/ninja_clean.py"
          if [ -f "$cleaner" ] ; then
            SECONDS=0
            echo "Running cleaner"
            # Log file must not exist
            rm -f "ninja_clean.log" # TODO: remove it in prep env
            test ! -f ninja_clean.log
            python "$cleaner" --build-dir "${{WORKSPACE}}/{build-dir}" 2>&1 | tee ninja_clean.log
            ec="${{PIPESTATUS[0]}}"
            echo "Took $SECONDS seconds"
            # Abort if first cmd in pipe failed
            test "X${{ec}}" == "X0"
          fi
        fi

        export NINJA_STATUS="[%s/%t] %es "
        if [ $OS == Windows_NT ] ; then
          echo "WINDOWS" # TODO: set _MSPDBSRV_ENDPOINT_ here
        fi
        export _MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
        SECONDS=0
        echo "Building project"
        # Log file must not exist
        rm -f "{cmake-build-log}" # TODO: remove it in prep env
        test ! -f "{cmake-build-log}"
        # FIXME: CMAKE_BUILD_TYPE should be defined in project
        cmake --build . \
              --config "${{CMAKE_BUILD_TYPE:-Release}}" \
              {cmake_build_args_generator} 2>&1 | tee "{cmake-build-log}"
        ec="${{PIPESTATUS[0]}}"
        echo "Took $SECONDS seconds"
        # Abort if first cmd in pipe failed
        test "X${{ec}}" == "X0"

    # STAGE: PUBLISH
    # ========================================

    publishers:
    - delete-hg-repos(if-damaged)
    - archive:
        artifacts: '{build-artifacts-min}'
        allow-empty: 'false'
        fingerprint: true

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          - UNSTABLE
          - FAILURE
          build-steps:
          # Don't publish anything if build even didn't start
          - conditional-step:
              condition-kind: file-exists
              condition-filename: "{build-dir}/{cmake-build-log}"
              condition-basedir: workspace
              steps:
              - trigger-builds:
                - project: 'helper.push-component'
                  predefined-parameters: |
                    REQUESTED_BY={tag_requested_by}
                    BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                    BUILD_STATUS=passed
                    PIPELINE=$PIPELINE
                    BRANCH=$BRANCH
                    BUILD_IDENTITY=$BUILD_IDENTITY
                    CUSTOMIZATION=$CUSTOMIZATION
                    PLATFORM=$PLATFORM
                    NX_VMS_COMMIT=$NX_VMS_COMMIT
                    LOCAL_PATH=$WORKSPACE/{build-dir}/
                    COMPONENTS={build-artifacts}
                    NODE_SSH_CONNECTION=$SSH_CONNECTION
                    SSH_USER=$USER
                  block: true
                  block-thresholds:
                    failure-threshold: FAILURE
          - description-setter:
              description: >-
                <a href='{artifact_repository_base_url}/{artifact_location_full_pattern}'> Artifacts </a>,
                <a href='$JUNKSHOP_URL'> Junkshop </a>

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          build-steps:
          - trigger-builds:
            - project: 'helper.build-reporter'
              block: '{synchronous-reporting}'
              predefined-parameters: |
                REQUESTED_BY={tag_requested_by}
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                PIPELINE=$PIPELINE
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_STATUS=passed
                LOGFILE={cmake-build-log}
                RUNNER_URL=$RUNNER_URL
                JUNKSHOP_HOST=$JUNKSHOP_HOST
                JUNKSHOP_DB_HOST=$JUNKSHOP_DB_HOST

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - FAILURE
          build-steps:
          - trigger-builds:
            - project: 'helper.build-reporter'
              block: '{synchronous-reporting}'
              predefined-parameters: |
                REQUESTED_BY={tag_requested_by}
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                PIPELINE=$PIPELINE
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_STATUS=failed
                LOGFILE={cmake-build-log}
                RUNNER_URL=$RUNNER_URL
                JUNKSHOP_HOST=$JUNKSHOP_HOST
                JUNKSHOP_DB_HOST=$JUNKSHOP_DB_HOST

    # after everything is published, delete results
    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          - UNSTABLE
          - FAILURE
          build-steps:
          - folder-delete-operation:
              folder-path: 'build/distrib'

    - failure-email:
        email-recipients: '{build-watchers}'
    - fixed-email:
        email-recipients: '{build-watchers}'
