
- job-template:
    name: '{pipeline}.{branch}.vms.installer.{platform}.{customization}.build'
    node: '{installer-build-node}'
    workspace: '{workspace}'

    concurrent: true

    parameters:
    - p_CLEAN_WORKSPACE
    - p_CLEAN_CLONE
    - p_CLEAN_BUILD
    - p_BUILD_IDENTITY
    - p_NX_VMS_COMMIT:
        default: '{branch}'

    wrappers:
    - timestamps
    - workspace-cleanup:
        check-parameter: CLEAN_WORKSPACE
    - build-name:
        name: '[${{BUILD_ID}}] {branch}-${{BUILD_IDENTITY}}@${{NX_VMS_COMMIT}}'

    # STAGE: PRE-SCM
    # ========================================

    - pre-scm-repo-manipulations-2

    # STAGE: SCM
    # ========================================

    scm:
    - hg-la:
        project-name: devtools
        branch-name: default
    - hg-la:
        project-name: nx_vms
        branch-name: $NX_VMS_COMMIT

    builders:

    # STAGE: CLEANUP
    # ========================================

    # Optionally remove entire build directory
    - conditionally-clean-dir:
        condition-varname: CLEAN_BUILD
        dir: build

    # Unconditionally ensure that all artifacts that may be left in workspace after
    # any previous build process are removed

    # Remove CMake caches
    - file-delete-operation:
        includes: build/CMakeCache.txt
        excludes: ''

    # Remove any logs located in build dir since build dir is shared across customizations
    - file-delete-operation:
        includes: 'build/*.log'
        excludes: ''

    # Remove distrib folder
    - folder-delete-operation:
        folder-path: build/distrib

    # Run custom cleaner provided by development team
    # TODO: display content of file
    - conditional-step:
        condition-kind: file-exists
        condition-filename: '{custom_cleaner_path}'
        condition-basedir: workspace
        steps:
        - run-process:
            workdir: $WORKSPACE/build
            executable: python
            executable-is-relpath: 'false'
            arguments: '{custom_cleaner_path},--build-dir,$WORKSPACE/build'
            logfile: build/cleaner.log
            inherit-environ: 'true'
            environ: ''

    # STAGE: SETUP BUILD ENVIRONMENT
    # ========================================

    # Create build folder
    # TODO: Check that condition is really needed
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: file-exists
          condition-filename: build
          condition-basedir: workspace
        steps:
        - folder-create-operation:
            folder-path: 'build'

    - trigger-builds:
      - project: 'helper.pull-component'
        predefined-parameters: |
          BUILD_IDENTITY=$BUILD_IDENTITY
          SSH_USER=$USER
          LOCAL_PATH=$WORKSPACE/
          PLATFORM=universal
          CUSTOMIZATION=default
          COMPONENTS=server-external
          NODE_SSH_CONNECTION=$SSH_CONNECTION
        block: true
        block-thresholds:
          failure-threshold: FAILURE

    # STAGE: BUILD
    # ========================================

    - inject:
        properties-content: |
          PIPELINE={pipeline}
          CUSTOMIZATION={customization}
          PLATFORM={platform}
          {cmake_configure_args_global}
    - inject:
        properties-content: |
          {cmake_configure_args_pipeline}
    - inject:
        properties-content: |
          {cmake_configure_args_platform}
    - inject:
        properties-content: |
          {cmake_configure_args_customization}
    - inject:
        properties-content: |
          CMAKE_ARG_customWebAdminPackageDirectory=$WORKSPACE/server-external
          CMAKE_ARG_buildNumber=$BUILD_IDENTITY
          CMAKE_SOURCEDIR=../nx_vms
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_ENV_environment=$WORKSPACE
          environment=$WORKSPACE
    - inject:
        properties-content: |
          WORKDIR=$WORKSPACE/build
          EXECUTABLE=cmake
          EXECUTABLE_IS_RELPATH=false
          LOGFILE=build/cmake-configure-{customization}.log
          INHERIT_ENVIRON=true
    - groovy:
        version: '{groovy-version}'
        command: !include-raw-escape: ../builders/cmake_configure_wrapper.groovy

    # Build
    - inject:
        properties-content: |
          WORKDIR=$WORKSPACE/build
          EXECUTABLE=cmake
          CMAKE_BUILD_THREADS=20
          LOGFILE=build/cmake-build-{customization}.log
          CMAKE_ENV_NINJA_STATUS="[%s/%t] %es "
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_ENV_environment=$WORKSPACE
          INHERIT_ENVIRON=true
    - groovy:
        version: '{groovy-version}'
        command: !include-raw-escape: ../builders/cmake_build_wrapper.groovy

    # STAGE: PUBLISH
    # ========================================

    publishers:
    - archive:
        artifacts: 'build/*.log'
        allow-empty: 'false'
        fingerprint: true

    - trigger-parameterized-builds:
      - project:
        - 'helper.push-component'
        condition: UNSTABLE_OR_BETTER
        predefined-parameters: |
          BUILD_IDENTITY=$BUILD_IDENTITY
          PLATFORM=$PLATFORM
          CUSTOMIZATION=$CUSTOMIZATION
          LOCAL_PATH=$WORKSPACE/build/
          COMPONENTS=distrib/,bin/,lib/,current_config.py,build_info.txt
          NODE_SSH_CONNECTION=$SSH_CONNECTION
          SSH_USER=$USER