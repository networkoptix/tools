- job-template:
    name: '{pipeline}.{branch}.vms.trigger.{preset}'

    node: runner
    concurrent: true

    timer: ''  # no timed trigger by default
    clean-build: '' # false by default
    default-build-description: ''

    # vars
    tag_requested_by: $JOB_NAME-$BUILD_NUMBER

    properties:
    - heavy-job:
        weight: 1
    - throttle:
        max-total: 10
        option: project
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: 100

    parameters:
    - p_BUILD_DESCRIPTION:
        default: '{default-build-description}'
    - simple-separator:
        header: Build parameters
    - p_CLEAN_BUILD:
        default: '{clean-build}'
    # FIXME: Figure out why extended choice created from JJB is not visible..
    - p_PLATFORMS:
        default: '{platforms}'
    - p_CUSTOMIZATIONS:
        default: '{customizations}'
    - string:
        name: _NX_VMS_COMMIT
        default: '{branch}'
    - bool:
        name: FREEZE_COMMIT_NOW
        default: false
        description: Freeze nx_vms commit right now, don't wait for starting builds


    triggers:
    - timed: "{timer}"

    wrappers:
    - inject:
        properties-content: |
          BRANCH={branch}
          PIPELINE={pipeline}
    - timestamps
    # note: DO NOT ADD any timeouts here. Put them in corresponding child jobs.

    builders:

    # Runner itself may freeze commits (when runner is triggereddirectly)
    # But we want to allow users to freeze commit by the time this job is triggered

    # inject given ref at first
    - inject:
        properties-content: |
          NX_VMS_COMMIT=$_NX_VMS_COMMIT

    # freeze if needed and overwrite
    - conditional-step:
        condition-kind: boolean-expression
        condition-expression: '${{ENV,var="FREEZE_COMMIT_NOW"}}'
        steps:
        - trigger-builds:
          - project: '{pipeline}.{branch}.vms.freeze_nx_vms_commit'
            block: true
            predefined-parameters: |
              REQUESTED_BY={tag_requested_by}
              NX_VMS_COMMIT=$NX_VMS_COMMIT
        - copyartifact:
            project: '{pipeline}.{branch}.vms.freeze_nx_vms_commit'
            filter: 'NX_VMS_COMMIT.envvar'
            which-build: last-completed
            parameter-filters: REQUESTED_BY={tag_requested_by}
        - inject:
            properties-file: 'NX_VMS_COMMIT.envvar'

    - description-setter:
        description: |
          $PLATFORMS $CUSTOMIZATIONS for $NX_VMS_COMMIT ($_NX_VMS_COMMIT)
    - description-setter:
        description: |
          $BUILD_DESCRIPTION

    # We don't use multijob to hide dependency graph from trigger because graph
    # is too big and takes a while to be loaded
    # Anyway this graph is available in runner
    - trigger-builds:
      - project: '{pipeline}.{branch}.vms.runner'
        predefined-parameters: |
          REQUESTED_BY={tag_requested_by}
          BUILD_DESCRIPTION=$BUILD_DESCRIPTION
          PLATFORMS=$PLATFORMS
          CUSTOMIZATIONS=$CUSTOMIZATIONS
          _NX_VMS_COMMIT=$NX_VMS_COMMIT
          CLEAN_BUILD=$CLEAN_BUILD
        block: true
        block-thresholds:
          failure-threshold: FAILURE

    publishers:
    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          - UNSTABLE
          - FAILURE
          - NOT_BUILT
          - ABORTED
          build-steps:
          - copyartifact:
              project: '{pipeline}.{branch}.vms.runner'
              filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
              which-build: last-completed
              parameter-filters: REQUESTED_BY={tag_requested_by}
          - inject:
              properties-file: 'NX_VMS_COMMIT.envvar'
          - inject:
              properties-file: 'BUILD_IDENTITY.envvar'

    - publisher-set-build-name:
        name: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'

    - completed-email
    - failure-email:
        email-recipients: ''
