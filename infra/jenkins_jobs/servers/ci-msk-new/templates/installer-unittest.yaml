- job-template:
    id: installer-unittests
    name: '{pipeline}.{version}.{project}.distribution.{platform}.{customization}.unittest'
    description: |
      Run unit tests for {platform} for {version}.

    node: '{unittest-node}'
    concurrent: true
    workspace: 'nx_{pipeline}_ut_thr${{EXECUTOR_NUMBER}}/'

    # We have 2 kinds of timeouts:
    # 1) timeout for entire job
    # 2) timeout for only testrunner
    # this is done because testrunner should be able to mark
    # tests as timed out before it will be killed by build timeout
    job-timeout: "40" # min
    sdk-testrunner-timeout: "300" # 5 min
    testrunner-timeout: "750" # sec = 12.5 min

    properties:
    - authorization-{pipeline}-system
    - priority-sorter:
        priority: !j2: '{{ pipeline_priority }}'
    - throttle:
        max-total: 5
        option: category
        categories:
        - '{unittest-node}'
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default_artifact_num_to_keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_CLEAN_CLONE
    - p_BUILD_IDENTITY
    - p_NX_VMS_COMMIT
    - p_RUNNER_URL
    - p_BRANCH:
        default: '{default_branch}'
    - p_PIPELINE(hidden):
        default: '{pipeline}'
    - p_CUSTOMIZATION(hidden):
        default: '{customization}'
    - p_PLATFORM(hidden):
        default: '{platform}'

    wrappers:
    # NOTE: There is a bug in jenkins: vars set here are read-only and can not be modified.
    - inject:
        properties-content: |
          SDK_TESTRUNNER_TIMEOUT={sdk-testrunner-timeout}
          TESTRUNNER_TIMEOUT={testrunner-timeout}
    - timestamps
    - timeout:
        timeout: '{job-timeout}'
        fail: true
        type: absolute
    - pre-scm-buildstep:
        failOnError: true
        buildsteps:
        - custom-clean-workspace:
            keep_files: [ devtools, venv ]
        - delete-files(on-windows):
            files: devtools
        - import-hg-repo(if-missing):
            name: devtools
            branch: default
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            pipeline: '{pipeline}'
            basedir: $WORKSPACE

    scm:
    - hg-local-no-changelog:
        name: devtools
        revision: 'default'

    builders:
    - set-hg-marker-successful-checkout

    - inject:
        properties-content: |
          JUNKSHOP_HOST={junk_shop_host}
          JUNKSHOP_DB_HOST={junkshop_db_host}
    - inject:
        properties-content: |
          JUNKSHOP_PROJECT_NAME={junkshop_project_name}
          JUNKSHOP_BASE_URL=http://$JUNKSHOP_HOST
    - inject:
        properties-content: |
          JUNKSHOP_URL=$JUNKSHOP_BASE_URL/{junkshop_location_full_pattern}
          REPOSITORY_URL={artifact_repository_base_url}/{artifact_location_full_pattern}
    - set-custom-build-description

    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
        macro: true

    - description-setter:
        description: >-
          <a href='$REPOSITORY_URL'> Artifacts </a>,
          <a href='$JUNKSHOP_URL'> Junkshop </a>

    - trigger-builds:
      - project: '{pipeline}.helper.pull-component'
        predefined-parameters: |
          REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
          BUILD_DESCRIPTION=$BUILD_DESCRIPTION
          BRANCH=$BRANCH
          BUILD_IDENTITY=$BUILD_IDENTITY
          CUSTOMIZATION=$CUSTOMIZATION
          PLATFORM=$PLATFORM
          BRANCH=$BRANCH
          NX_VMS_COMMIT=$NX_VMS_COMMIT
          SSH_USER=$USER
          LOCAL_PATH=$WORKSPACE/build/
          COMPONENTS=distrib/*unit_tests*,current_config.py,lib/,bin/*_ut,bin/*_ut.exe,bin/*_tests,bin/*_tests.exe,bin/*.dll
          NODE_SSH_CONNECTION=$SSH_CONNECTION
        block: true
        block-thresholds:
          failure-threshold: FAILURE

    - shell: |
        #!bash
        set -ex

        pushd build
          if [ "$( find . -path './distrib/*unit_tests*' | wc -l)" -gt 0 ] ; then
            rm -rf bin
            rm -rf lib
          fi
          find . -path './distrib/*unit_tests*.tar.gz' -exec tar -zxvf '{{}}' \;
          find . -path './distrib/*unit_tests*.zip' -exec unzip -o '{{}}' \;
          find . -name '*.exe' -exec chmod +x {{}} \;
          ls -la bin
        popd

        if [ ! -d venv ]; then
          virtualenv --system-site-packages venv
        fi

        if [ -d venv/Scripts ] ; then
          source venv/Scripts/activate
        else
          source venv/bin/activate
        fi
        # venv activated
          pip install --upgrade pip setuptools wheel
          pip install --upgrade -r "devtools/ci/junk_shop/requirements.txt"

          mkdir -p unit_tests_sdk unit_tests

          # run metadata sdk tests if exists
          if [ -d build/nx_metadata_sdk ] ; then

            # +x is needed for windows only
            if [ "X${{OS}}" == "XWindows_NT" ] ; then
              chmod +x -R build/nx_metadata_sdk
            fi

            pushd unit_tests_sdk
              # run tests
              PYTHONPATH="$WORKSPACE/devtools/ci/junk_shop" \
              $WORKSPACE/devtools/ci/junk_shop/junk_shop/unittest_run.py \
                --timeout="$SDK_TESTRUNNER_TIMEOUT" \
                "$WORKSPACE/build/current_config.py" \
                "$WORKSPACE/build/nx_metadata_sdk" \
                $(cd $WORKSPACE/build/nx_metadata_sdk && find . -name '*_ut' -or -name '*_ut.exe' -or -name '*_tests' -or -name '*_tests.exe' | sed "s|^\./||")
            popd
          fi

          # +x is needed for windows only
          if [ "X${{OS}}" == "XWindows_NT" ] ; then
            chmod +x -R build/bin
          fi

          # run vms tests
          pushd unit_tests
            # run tests
            PYTHONPATH="$WORKSPACE/devtools/ci/junk_shop" \
            $WORKSPACE/devtools/ci/junk_shop/junk_shop/unittest_run.py \
              --timeout="$TESTRUNNER_TIMEOUT" \
              "$WORKSPACE/build/current_config.py" \
              "$WORKSPACE/build/bin" \
              $(cd $WORKSPACE/build/bin && find . -name '*_ut' -or -name '*_ut.exe' -or -name '*_tests' -or -name '*_tests.exe' | sed "s|^\./||")
          popd

        deactivate

        failed_tests_num="$(find . -type f -path './unit_tests*_ut.yaml' -exec cat {{}} \; | grep -E '^exit_code' | grep -E -v '\b0\b' | wc -l)"
        if [ $failed_tests_num -gt 0 ] ; then
          echo "Detected ${{failed_tests_num}} failed test bundles, build will be marked as unstable"
          touch unstable.flag
        fi

    publishers:
    - delete-hg-repos(if-damaged)
    - groovy-postbuild:
        script: !include-raw-escape: ../builders/check_unstable.groovy

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          - FAILURE
          - UNSTABLE
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.helper.publish-tests'
              block: true
              predefined-parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_STATUS=passed
                COMPONENTS=unit_tests*.yaml,unit_tests*.output,unit_tests*.bt
                LOCAL_PATH=$WORKSPACE/
                NODE_SSH_CONNECTION=$SSH_CONNECTION
                SSH_USER=$USER

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - SUCCESS
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.helper.unittests-reporter'
              block: false
              predefined-parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                RUNNER_URL=$RUNNER_URL
                JUNKSHOP_HOST=$JUNKSHOP_HOST
                JUNKSHOP_DB_HOST=$JUNKSHOP_DB_HOST

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on:
          - UNSTABLE
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.helper.unittests-reporter'
              block: false
              predefined-parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                RUNNER_URL=$RUNNER_URL
                JUNKSHOP_HOST=$JUNKSHOP_HOST
                JUNKSHOP_DB_HOST=$JUNKSHOP_DB_HOST

    - custom-clean-workspace:
        keep_files: [ devtools, venv ]

    - failure-email:
        email-recipients: '{build-watchers}'
    - fixed-email:
        email-recipients: '{build-watchers}'
