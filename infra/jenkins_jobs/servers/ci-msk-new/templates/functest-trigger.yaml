- job-template:
    name: '{pipeline}.{version}.{project}.trigger.{tests}.{preset}'
    description: |
      <pre>
      ================================================================================
      Functional Tests Trigger
      ================================================================================

      JOB MAINTAINERS
        {job_maintainers}
        (NOT notified by email on build failures)

      SOURCES
        devtools/infra/jenkins_jobs/servers/ci-msk-new/templates/{tests}-trigger.yaml

      --------------------------------------------------------------------------------

      This job serves for starting functional tests for latest successfull build
      from on-push or niglty trigger.

      {detailed_job_description}

      Note, that this job doesn't wait for downstream build completion.
      Find your build in crsp build queue

      --------------------------------------------------------------------------------
      </pre>
    # all build triggers will work under the same workspace as well as
    node: '{hg_local_cache_node_write}'
    workspace: '{hg_local_cache_node_workspace}'
    concurrent: false

    test_select_expr: 'not windows and not smb'
    test_list: ''
    ft_customization: default  # TODO: sync with ci customizations

    timer: ''  # no timed trigger by default
    clean_workspace: '' # false by default
    default_build_description: ''

    properties:
    - authorization-{pipeline}-trigger
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default_artifact_num_to_keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: '{default_build_description}'
    - p_BRANCH:
        default: '{default_branch}'
    - string:
        name: TEST_FRAMEWORK_BRANCH
        default: '{default_test_framework_branch}'
    - p_USE_BUILD_IDENTITY:
        default: ''
    - p_TEST_SELECT_EXPR:
        default: '{test_select_expr}'
    - p_TEST_LIST:
        default: '{test_list}'
    - p_CLEAN_WORKSPACE:
        default: '{clean_workspace}'
    - p_PIPELINE(hidden):
        default: '{pipeline}'

    triggers:
    - timed: "{timer}"

    wrappers:
    - timestamps
    - timeout:
        # normally should complete in <1 min, but in case of clean clone this may not work
        # if there is no repo cloned yet, copy/clone it manually or change timeout
        timeout: 5 # min
        fail: true
        type: absolute

    scm:
    - hg-la:
        project-name: nx_vms
        branch-name: $TEST_FRAMEWORK_BRANCH

    builders:
    - inject:
        properties-content: |
          JUNKSHOP_HOST={junk_shop_host}
    - inject:
        properties-content: |
          JUNKSHOP_PROJECT_NAME={junkshop_project_name}
          JUNKSHOP_BASE_URL=http://$JUNKSHOP_HOST
    - inject:
        properties-content: |
          JUNKSHOP_URL=$JUNKSHOP_BASE_URL/{junkshop_location_root_pattern}
    - set-custom-build-description

    # cleanup old envvars; prepare default values
    - shell: |
        #!/bin/bash
        set -ex
        rm -f *.envvar
    - inject:
        properties-content: |
          BUILD_IDENTITY_ON_PUSH=0
          BUILD_IDENTITY_NIGHTLY=0

    # use latest func_tests commit
    - shell: |
        #!/bin/bash
        set -ex
        echo "NX_TEST_FRAMEWORK_COMMIT=${{MERCURIAL_REVISION_SHORT}}" > 'NX_TEST_FRAMEWORK_COMMIT.envvar'
    - inject:
        properties-file: NX_TEST_FRAMEWORK_COMMIT.envvar

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$USE_BUILD_IDENTITY'
        condition-string2: ''
        steps:

        # pick commit and build identity from last successful on-push runner
        - shell: |
            #!/bin/bash
            set -ex
            rm -f NX_VMS_COMMIT.envvar BUILD_IDENTITY.envvar
        - copyartifact:
            project: '{pipeline}.{version}.{project}.runner'
            filter: 'NX_VMS_COMMIT.envvar, BUILD_IDENTITY.envvar'
            which-build: last-successful
            parameter-filters: UPSTREAM_JOB_NAME={pipeline}.{version}.{project}.trigger.on-push
            optional: true
        - conditional-step:
            condition-kind: file-exists
            condition-filename: BUILD_IDENTITY.envvar
            condition-basedir: workspace
            steps:
            - inject-properties-file:
                properties-file: NX_VMS_COMMIT.envvar
            - inject-properties-file:
                properties-file: BUILD_IDENTITY.envvar
            - shell: |
                #!/bin/bash
                set -ex
                echo "BUILD_IDENTITY_ON_PUSH=$BUILD_IDENTITY" > 'ON_PUSH.envvar'
                echo "NX_VMS_COMMIT_ON_PUSH=$NX_VMS_COMMIT" >> 'ON_PUSH.envvar'
            - inject:
                properties-file: ON_PUSH.envvar

        # pick commit and build identity from last successful nightly runner
        - shell: |
            #!/bin/bash
            set -ex
            rm -f NX_VMS_COMMIT.envvar BUILD_IDENTITY.envvar
        - copyartifact:
            project: '{pipeline}.{version}.{project}.runner'
            filter: 'NX_VMS_COMMIT.envvar, BUILD_IDENTITY.envvar'
            which-build: last-successful
            parameter-filters: UPSTREAM_JOB_NAME={pipeline}.{version}.{project}.trigger.nightly
            optional: true
        - conditional-step:
            condition-kind: file-exists
            condition-filename: BUILD_IDENTITY.envvar
            condition-basedir: workspace
            steps:
            - inject-properties-file:
                properties-file: NX_VMS_COMMIT.envvar
            - inject-properties-file:
                properties-file: BUILD_IDENTITY.envvar
            - shell: |
                #!/bin/bash
                set -ex
                echo "BUILD_IDENTITY_NIGHTLY=$BUILD_IDENTITY" > 'NIGHTLY.envvar'
                echo "NX_VMS_COMMIT_NIGHTLY=$NX_VMS_COMMIT" >> 'NIGHTLY.envvar'
            - inject:
                properties-file: NIGHTLY.envvar

        - shell: |
            #!/bin/bash
            set -ex
            if (($BUILD_IDENTITY_NIGHTLY == 0 && $BUILD_IDENTITY_ON_PUSH == 0)); then
                echo ""
                echo "*****  No successful nightly nor on-push builds were found; bailing out. *****"
                echo ""
                echo "SHOULD_TRIGGER=false" > CHOICE.envvar
            else
                if (($BUILD_IDENTITY_NIGHTLY > $BUILD_IDENTITY_ON_PUSH)); then
                    echo "Nightly build was later than on-push."
                    echo "TRIGGERED_KIND=NIGHTLY" > CHOICE.envvar
                    echo "BUILD_IDENTITY=$BUILD_IDENTITY_NIGHTLY" >> CHOICE.envvar
                    echo "NX_VMS_COMMIT=$NX_VMS_COMMIT_NIGHTLY" >> CHOICE.envvar
                else
                    echo "On-push build was later than nightly."
                    echo "TRIGGERED_KIND=ON-PUSH" > CHOICE.envvar
                    echo "BUILD_IDENTITY=$BUILD_IDENTITY_ON_PUSH" >> CHOICE.envvar
                    echo "NX_VMS_COMMIT=$NX_VMS_COMMIT_ON_PUSH" >> CHOICE.envvar
                fi
                echo "SHOULD_TRIGGER=true" >> CHOICE.envvar
            fi

    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: strings-match
          condition-string1: '$USE_BUILD_IDENTITY'
          condition-string2: ''
        steps:
        - build-registry-get-commit:
            pipeline: '{pipeline}'
            version: '{version}'
            branch: $BRANCH
            project: '{project}'
            build-identity: $USE_BUILD_IDENTITY
        - shell: |
            #!/bin/bash
            set -ex
            echo "TRIGGERED_KIND=CUSTOM" > CHOICE.envvar
            echo "BUILD_IDENTITY=$USE_BUILD_IDENTITY" >> CHOICE.envvar
            echo "NX_VMS_COMMIT=$NX_VMS_COMMIT" >> CHOICE.envvar
            echo "SHOULD_TRIGGER=true" >> CHOICE.envvar

    - inject:
        properties-file: CHOICE.envvar

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$SHOULD_TRIGGER'
        condition-string2: 'true'
        steps:
        - build-name-setter:
            template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
            macro: true
        - description-setter:
            description: |
              $TRIGGERED_KIND
        - trigger-builds:
          - project: '{pipeline}.{version}.{project}.distribution.{ft_customization}.{tests}'
            predefined-parameters: |
              REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              BUILD_IDENTITY=$BUILD_IDENTITY
              BRANCH=$BRANCH
              NX_VMS_COMMIT=$NX_VMS_COMMIT
              NX_TEST_FRAMEWORK_COMMIT=$NX_TEST_FRAMEWORK_COMMIT
              JUNKSHOP_HOST=$JUNKSHOP_HOST
              TEST_SELECT_EXPR=$TEST_SELECT_EXPR
              TEST_LIST=$TEST_LIST
            block: false # !! don't wait
            block-thresholds:
              failure-threshold: FAILURE
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: strings-match
          condition-string1: '$SHOULD_TRIGGER'
          condition-string2: 'true'
        steps:
        - build-name-setter:
            template: '#$BUILD_ID $BRANCH'
            macro: true
        - description-setter:
            description: |
              RUNNER IS NOT TRIGGERED

    publishers:
    - archive:
        artifacts: '*.envvar'
        allow-empty: 'false'
        fingerprint: true
    - failure-email-helpers(maintainers):
        email-recipients: '{job_maintainers}'
