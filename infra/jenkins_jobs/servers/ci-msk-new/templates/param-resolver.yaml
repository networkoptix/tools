- job-template:
    name: '__{pipeline}.{version}.param-resolver'
    id: param-resolver
    concurrent: false
    node: runner


    properties:
    - authorization-{pipeline}-system

    parameters:
    - string:
        name: REQUESTED_BY
    - string:
        name: BUILD_DESCRIPTION

    - string:
        name: BRANCH  # do we really need it?

    - string:
        name: VMS_BUILD
    - string:
        name: VMS_BUILD_OPTION
    - string:
        name: PLATFORMS
    - string:
        name: CUSTOMIZATIONS
    - string:
        name: CLOUD_GROUP
    - string:
        name: HARDWARE_SIGNING
    - string:
        name: TRUSTED_TIMESTAMPING
    - string:
        name: CUSTOM_CMAKE_PARAMETERS

    - string:
        name: UT_ENABLED

    - string:
        name: FT_ENABLED
    - string:
        name: FT_COMMIT
    - string:
        name: FT_COMMIT_OPTION
    - string:
        name: TEST_SELECT_EXPR
    - string:
        name: TEST_LIST

    - string:
        name: RCT_ENABLED
    - string:
        name: RCT_COMMIT
    - string:
        name: RCT_COMMIT_OPTION

    builders:

    - custom-clean-workspace:
        keep_files: [ devtools, nx_vms ]

    # clean old
    - shell: |
        #!bash
        echo '' > RUNNER_ARGS.envvars

    # working with build identity & commit

    # === NEW BUILD ===
    # 1) new from commit
    - shell: echo 'Check $VMS_BUILD <> VMS_NEW_BUILD_BY_COMMIT'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_NEW_BUILD_BY_COMMIT'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_NEW_BUILD_BY_COMMIT)"
        - shell: |
            #!bash
            test $VMS_BUILD_OPTION != ''
        - trigger-builds:
          - project: '{pipeline}.build_number.generator'
            block: true
            predefined-parameters: |
              REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
        - copyartifact:
            project: '{pipeline}.build_number.generator'
            filter: 'BUILD_IDENTITY.envvar'
            which-build: last-completed
            parameter-filters: REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
        - freeze-nx-vms-commit(remote):
            pipeline: '{pipeline}'
            branch: $BRANCH
            commit-to-freeze: $BRANCH
            commit-varname: NX_VMS_COMMIT
        - shell: |
            #!bash
            cat BUILD_IDENTITY.envvar >> RUNNER_ARGS.envvars
            echo "NX_VMS_COMMIT=$NX_VMS_COMMIT" >> RUNNER_ARGS.envvars

    # === EXISTING BUILDS ===
    # 3) get by identity
    - shell: echo 'Check $VMS_BUILD <> VMS_EXIST_BUILD_BY_COMMIT'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_EXIST_BUILD_BY_COMMIT'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_EXIST_BUILD_BY_COMMIT)"
        - copyartifact:
            # runner is shared between presets, so this is the place where any
            # build may be found
            project: '{pipeline}.{version}.vms.runner'
            filter: 'NX_VMS_COMMIT.envvar'
            which-build: last-successful # or last-completed ?
            parameter-filters: >-
              NX_VMS_COMMIT=$VMS_BUILD_OPTION
            optional: false
        - shell: |
            #!bash
            echo "NX_VMS_COMMIT=$VMS_BUILD_OPTION" >> RUNNER_ARGS.envvars
            cat BUILD_IDENTITY.envvar >> BUILD_IDENTITY.envvar
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

    # 3) get by identity
    - shell: echo 'Check $VMS_BUILD <> VMS_EXIST_BUILD_BY_IDENTITY'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_EXIST_BUILD_BY_IDENTITY'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_EXIST_BUILD_BY_IDENTITY)"
        - copyartifact:
            # runner is shared between presets, so this is the place where any
            # build may be found
            project: '{pipeline}.{version}.vms.runner'
            filter: 'NX_VMS_COMMIT.envvar'
            which-build: last-successful # or last-completed ?
            parameter-filters: >-
              BUILD_IDENTITY=$VMS_BUILD_OPTION
            optional: false
        - shell: |
            #!bash
            echo "BUILD_IDENTITY=$VMS_BUILD_OPTION" >> RUNNER_ARGS.envvars
            cat NX_VMS_COMMIT.envvar >> RUNNER_ARGS.envvars
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

    # 3) get last pushed
    - shell: echo 'Check $VMS_BUILD <> VMS_EXIST_BUILD_STABLE_PUSH'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_EXIST_BUILD_STABLE_PUSH'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_EXIST_BUILD_STABLE_PUSH)"
        - copyartifact:
            project: '{pipeline}.{version}.preset.on-push-vms'
            filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
            which-build: last-successful
            optional: false  #! build must exist
        - shell: |
            #!bash
            # echo "BUILD_IDENTITY=$VMS_BUILD_OPTION" >> RUNNER_ARGS.envvars
            cat BUILD_IDENTITY.envvar >> RUNNER_ARGS.envvars
            cat NX_VMS_COMMIT.envvar >> RUNNER_ARGS.envvars
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

    # 3) get last nightly
    - shell: echo 'Check $VMS_BUILD <> VMS_EXIST_BUILD_STABLE_NIGHTLY'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_EXIST_BUILD_STABLE_NIGHTLY'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_EXIST_BUILD_STABLE_NIGHTLY)"
        - copyartifact:
            project: '{pipeline}.{version}.preset.nightly-vms'
            filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
            which-build: last-successful
            optional: false
        - shell: |
            #!bash
            cat BUILD_IDENTITY.envvar >> RUNNER_ARGS.envvars
            cat NX_VMS_COMMIT.envvar >> RUNNER_ARGS.envvars
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

    # 3) get last push / nightly
    - shell: echo 'Check $VMS_BUILD <> VMS_EXIST_BUILD_STABLE_PUSH_OR_NIGHTLY'
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD'
        condition-string2: 'VMS_EXIST_BUILD_STABLE_PUSH_OR_NIGHTLY'
        steps:
        - shell: echo "VMS_BUILD=$VMS_BUILD (VMS_EXIST_BUILD_STABLE_PUSH_OR_NIGHTLY)"
        - shell: mkdir -p on-push nightly
        - copyartifact:
            project: '{pipeline}.{version}.preset.on-push-vms'
            filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
            which-build: last-successful
            optional: true
            target: on-push
        - copyartifact:
            project: '{pipeline}.{version}.preset.nightly-vms'
            filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
            which-build: last-successful
            optional: true
            target: nightly
        - calculate-latest-commit:
            identity_file_1: './on-push/BUILD_IDENTITY.envvar'
            identity_file_2: './nightly/BUILD_IDENTITY.envvar'
            commit_file_1:   './on-push/NX_VMS_COMMIT.envvar'
            commit_file_2:   './nightly/NX_VMS_COMMIT.envvar'
            output_file:     'RUNNER_ARGS.envvars'
            identity_latest_varname: BUILD_IDENTITY
            commit_latest_varname: NX_VMS_COMMIT
        - shell: rm -rf on-push nightly
        - shell: |
            #!bash
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

    - shell: |
        #!bash
        echo "PLATFORMS=$PLATFORMS" >> RUNNER_ARGS.envvars
        echo "CUSTOMIZATIONS=$CUSTOMIZATIONS" >> RUNNER_ARGS.envvars
        echo "HARDWARE_SIGNING=$HARDWARE_SIGNING" >> RUNNER_ARGS.envvars
        echo "TRUSTED_TIMESTAMPING=$TRUSTED_TIMESTAMPING" >> RUNNER_ARGS.envvars
        echo "CUSTOM_CMAKE_PARAMETERS=$CUSTOM_CMAKE_PARAMETERS" >> RUNNER_ARGS.envvars

        if [ $UT_ENABLED == 'OFF' ] ; then
          echo "RUN_UNITTESTS=false" >> RUNNER_ARGS.envvars
        else
          echo "RUN_UNITTESTS=true" >> RUNNER_ARGS.envvars
        fi

        if [ $FT_ENABLED == 'OFF' ] ; then
          echo "RUN_FUNCTESTS=false" >> RUNNER_ARGS.envvars
        else
          echo "RUN_FUNCTESTS=true" >> RUNNER_ARGS.envvars
        fi

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$FT_ENABLED'
        condition-string2: 'RUN'
        steps:
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$FT_COMMIT'
            condition-string2: 'FT_OTHER_COMMIT'
            steps:
            - freeze-nx-vms-commit(remote):
                pipeline: '{pipeline}'
                branch: $BRANCH
                commit-to-freeze: $BRANCH
                commit-varname: NX_FUNCTESTS_COMMIT
            - shell: |
                #!bash
                echo "NX_FUNCTESTS_COMMIT=$NX_FUNCTESTS_COMMIT" >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$FT_COMMIT'
            condition-string2: 'FT_STABLE_PUSH'
            steps:
            - shell: echo NX_FUNCTESTS_COMMIT= > NX_FUNCTESTS_COMMIT.envvar
            - copyartifact:
                project: '{pipeline}.{version}.preset.on-push-ft'
                filter: 'NX_FUNCTESTS_COMMIT.envvar'
                which-build: last-successful
                optional: true
            - shell: |
                #!bash
                # FIXME: no such file
                cat NX_FUNCTESTS_COMMIT.envvar >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$FT_COMMIT'
            condition-string2: 'FT_STABLE_NIGHTLY'
            steps:
            - shell: echo NX_FUNCTESTS_COMMIT= > NX_FUNCTESTS_COMMIT.envvar
            - copyartifact:
                project: '{pipeline}.{version}.preset.nightly-ft'
                filter: 'NX_FUNCTESTS_COMMIT.envvar'
                which-build: last-successful
                optional: true
            - shell: |
                #!bash
                # FIXME: no such file
                cat NX_FUNCTESTS_COMMIT.envvar >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$FT_COMMIT'
            condition-string2: 'FT_STABLE_PUSH_OR_NIGHTLY'
            steps:
            - shell: mkdir -p on-push nightly
            - copyartifact:
                project: '{pipeline}.{version}.preset.on-push-ft'
                filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
                which-build: last-successful
                optional: true
                target: on-push
            - copyartifact:
                project: '{pipeline}.{version}.preset.nightly-ft'
                filter: 'NX_VMS_COMMIT.envvar,BUILD_IDENTITY.envvar'
                which-build: last-successful
                optional: true
                target: nightly
            - calculate-latest-commit:
                identity_file_1: './on-push/BUILD_IDENTITY.envvar'
                identity_file_2: './nightly/BUILD_IDENTITY.envvar'
                commit_file_1:   './on-push/NX_VMS_COMMIT.envvar'
                commit_file_2:   './nightly/NX_VMS_COMMIT.envvar'
                output_file:     'RUNNER_ARGS.envvars'
                commit_latest_varname: NX_FUNCTESTS_COMMIT
            - shell: rm -rf on-push nightly

    - shell: |
        #!bash
        echo "TEST_SELECT_EXPR=$TEST_SELECT_EXPR" >> RUNNER_ARGS.envvars
        echo "TEST_LIST=$TEST_LIST" >> RUNNER_ARGS.envvars

        if [ $RCT_ENABLED == 'OFF' ] ; then
          echo "RUN_REALCAMERATESTS=false" >> RUNNER_ARGS.envvars
        else
          echo "RUN_REALCAMERATESTS=true" >> RUNNER_ARGS.envvars
        fi

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$RCT_ENABLED'
        condition-string2: 'RUN'
        steps:
        - shell: echo
        # get FT commit from RCT_COMMIT & RCT_COMMIT_OPTION
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$RCT_COMMIT'
            condition-string2: 'RCT_BY_COMMIT'
            steps:
            - freeze-nx-vms-commit(remote):
                pipeline: '{pipeline}'
                branch: $BRANCH
                commit-to-freeze: $BRANCH
                commit-varname: NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT
            # TODO: Check branches
            - shell: |
                #!bash
                echo "NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT=$NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT" >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$RCT_COMMIT'
            condition-string2: 'RCT_STABLE_PUSH'
            steps:
            - shell: echo NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT= > NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar
            - copyartifact:
                project: '{pipeline}.{version}.preset.on-push-rct'
                filter: 'NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar'
                which-build: last-successful
                optional: true
            - shell: cat NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$RCT_COMMIT'
            condition-string2: 'RCT_STABLE_NIGHTLY'
            steps:
            - shell: echo NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT= > NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar
            - copyartifact:
                project: '{pipeline}.{version}.preset.nightly-rct'
                filter: 'NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar'
                which-build: last-successful
                optional: true
            - shell: |
                #!bash
                cat NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar >> RUNNER_ARGS.envvars
        - conditional-step:
            condition-kind: strings-match
            condition-string1: '$RCT_COMMIT'
            condition-string2: 'RCT_STABLE_PUSH_OR_NIGHTLY'
            steps:
            # TODO: build identities are not very clear here..
            - shell: mkdir -p on-push nightly
            - copyartifact:
                project: '{pipeline}.{version}.preset.on-push-rct'
                filter: 'NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar,BUILD_IDENTITY.envvar'
                which-build: last-successful
                optional: true
                target: on-push
            - copyartifact:
                project: '{pipeline}.{version}.preset.nightly-rct'
                filter: 'NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar,BUILD_IDENTITY.envvar'
                which-build: last-successful
                optional: true
                target: nightly
            - calculate-latest-commit:
                identity_file_1: './on-push/BUILD_IDENTITY.envvar'
                identity_file_2: './nightly/BUILD_IDENTITY.envvar'
                commit_file_1:   './on-push/NX_VMS_COMMIT.envvar'
                commit_file_2:   './nightly/NX_VMS_COMMIT.envvar'
                output_file:     'RUNNER_ARGS.envvars'
                commit_latest_varname: NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT
            - shell: rm -rf on-push nightly

    publishers:
    - archive:
        artifacts: '*.envvar'
        allow-empty: false
        fingerprint: true
    - archive:
        artifacts: '*.envvars'
        allow-empty: false
        fingerprint: true


