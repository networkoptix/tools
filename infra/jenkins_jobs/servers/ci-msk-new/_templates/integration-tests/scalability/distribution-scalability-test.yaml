- job-template:
    name: '{pipeline}.{version}.{project}.distribution.default.scaletest'
    id: scalability
    description: |
      Run scalability tests for default for {version}.
    node: '{scalability_node}'
    concurrent: false

    binaries_url: 'rsync://noptix.enk.me/buildenv/test/'
    workspace: 'workspace/scalability'

    workdir: work

    properties:
    - authorization-{pipeline}-system
    - throttle:
        max-total: 1
        option: category
        categories:
        - scalability
    - build-discarder:
        days-to-keep: 10
        num-to-keep: 50
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default_artifact_num_to_keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_CLEAN_WORKSPACE:
        default: true
    - p_BUILD_IDENTITY
    - p_BRANCH:
        default: '{default_branch}'
    - p_NX_VMS_COMMIT:
        default: ''
    - string:
        name: ST_COMMIT
    - string:
        name: USE_LIGHTWEIGHT_SERVERS
    - string:
        name: SERVER_COUNT
    - p_PIPELINE(hidden):
        default: '{pipeline}'
    - p_CUSTOMIZATION(hidden):
        default: 'default'
    - p_PLATFORM(hidden):
        default: all

    wrappers:
    - timestamps
    - timeout:
        timeout: 420 # min
        fail: true
        type: absolute
    - workspace-cleanup:
        check-parameter: CLEAN_WORKSPACE
    - credentials-binding:
      - username-password:
          credential-id: junk_shop_db
          variable: JUNK_SHOP_DB_CREDENTIALS
      - text:
          credential-id: service_email
          variable: AUTOTEST_EMAIL_PASSWORD
    - pre-scm-buildstep:
        failOnError: true
        buildsteps:
        - mercurial/import-repo-if-missing:
            name: devtools
            branch: default
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            pipeline: '{pipeline}'
            basedir: $WORKSPACE
        - mercurial/import-repo-if-missing:
            name: nx_vms
            branch: '{version}'
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            pipeline: '{pipeline}'
            basedir: $WORKSPACE
    scm:
    - mercurial/local-mirror:
        name: nx_vms
        revision: '$ST_COMMIT'
    - mercurial/local-mirror:
        name: devtools
        revision: default

    builders:
    - mercurial/mark-successful-checkout
    - inject:
        properties-content: |
          JUNKSHOP_URL={junkshop_base_url}/project/{junkshop_project_name}/$BRANCH/$BUILD_IDENTITY
          REPOSITORY_URL={artifacts_base_url}/$PIPELINE/$BRANCH/$BUILD_IDENTITY/$CUSTOMIZATION/$PLATFORM
    - decorators/set-custom-build-description

    - extended-bash:
        headers: ''
        script: |
          #!/bin/bash
          if [[ "$USE_LIGHTWEIGHT_SERVERS" == "true" ]]; then
              LWS_TYPE=lws
          else
              LWS_TYPE=full
          fi
          inject LWS_TYPE $LWS_TYPE

    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY: $SERVER_COUNT $LWS_TYPE'
        macro: true

    - description-setter:
        description: >-
          <a href='$REPOSITORY_URL'> Artifacts </a>,
          <a href='$JUNKSHOP_URL'> Junkshop </a>

    - functests/kill-hanged

    - shell: |
        #!/bin/bash
        rm -rf   "build" "dist" "{workdir}"
        mkdir -p "build" "dist" "{workdir}"
        rm -f unstable.flag

    - inject:
        properties-content: |
          BIN_DIR=$WORKSPACE/bin
          WORK_DIR=$WORKSPACE/{workdir}

    - trigger-builds:
      - project: '{pipeline}.helper.pull-component'
        predefined-parameters: |
          REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
          BUILD_DESCRIPTION=$BUILD_DESCRIPTION
          BRANCH=$BRANCH
          BUILD_IDENTITY=$BUILD_IDENTITY
          CUSTOMIZATION=$CUSTOMIZATION
          PLATFORM=linux-x64
          SSH_USER=$USER
          LOCAL_PATH=$WORKSPACE/build/
          COMPONENTS=distrib/*-server-*-linux64*.deb,distrib/*-unit_tests-*-linux64*.tar.gz
          NODE_SSH_CONNECTION=$SSH_CONNECTION
        block: true
        block-thresholds:
          failure-threshold: FAILURE

    - file-operations/file-copy-operation:
        includes: >-
          build/distrib/*-server-*-linux64*.deb,
          build/distrib/*-unit_tests-*-linux64*.tar.gz
        excludes: ''
        target-location: '$WORKSPACE/dist'
        flatten-files: 'true'

    - shell: |
        #!/bin/bash
        set -ex
        tar xvz -C dist -f dist/*-unit_tests-*-linux64*.tar.gz bin/appserver2_ut
        mv dist/bin/appserver2_ut dist/
        rmdir dist/bin

    - shell: |
        #!/bin/bash
        set -ex
        rsync -av {binaries_url} "$BIN_DIR/"

    - file-operations/file-create-operation:
        file-name: test-config.yaml
        file-content: |
          tests:
            scalability_test:
              merge_timeout: 1h
              host_list:
                - name: kappa
                  address: 192.168.13.8
                  username: jenkins
                  key_path: /home/jenkins/.ssh/id_rsa
                  dir: /home/jenkins/scalability
                  server_bind_address: 192.168.20.3
                  server_port_base: 7001
                  lws_port_base: 8001
                - name: sigma
                  address: 192.168.13.9
                  username: jenkins
                  key_path: /home/jenkins/.ssh/id_rsa
                  dir: /home/jenkins/scalability
                  server_bind_address: 192.168.20.4
                  server_port_base: 7001

    - shell: |
        #!/bin/bash
        echo '****************************************************************************************************'
        echo "*   use-lightweight-servers: $USE_LIGHTWEIGHT_SERVERS"
        echo "*   server-count: $SERVER_COUNT"
        echo '****************************************************************************************************'
        set -ex

        test -d "$BIN_DIR"
        mkdir -p "$WORK_DIR"

        if [ ! -d venv ]; then
          virtualenv venv
        fi

        source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install --upgrade -r devtools/ci/junk_shop/requirements.txt
          pip install --upgrade -r nx_vms/func_tests/requirements.txt

          export PYTHONPATH="$WORKSPACE/devtools/ci/junk_shop"
          export PYTEST_PLUGINS=junk_shop.pytest_plugin

          STORAGES_PER_SERVER=1
          CAMERAS_PER_SERVER=20
          USERS_PER_SERVER=4
          PROPERTIES_PER_CAMERA=5
          TRANSACTIONS_PER_SERVER_RATE=2.1
          MERGE_TIMEOUT=2h
          MESSAGE_BUS_TIMEOUT=20s
          TRANSACTIONS_STAGE_DURATION=20m
          TEST_TIMEOUT="$((4 * 60 * 60))" # 4hr

          pushd nx_vms/func_tests

            set +e
            export PYTEST_DEFAULTS_SECTION=ci  # init CI config
            pytest \
              --work-dir="$WORK_DIR" \
              --bin-dir="$BIN_DIR" \
              --mediaserver-installers-dir="$WORKSPACE/dist" \
              --timeout="$TEST_TIMEOUT" \
              --capture-db="$JUNK_SHOP_DB_CREDENTIALS@{junkshop_db_host}" \
              --build-parameters="\
        project={junkshop_project_name},\
        branch=$BRANCH,\
        build_num=$BUILD_IDENTITY,\
        platform=linux-x64,\
        customization=$CUSTOMIZATION" \
              --slot="$EXECUTOR_NUMBER" \
              --reinstall \
              -v \
              --run-name=scalability \
              --tests-config-file="$WORKSPACE/test-config.yaml" \
              --test-parameters="\
        scalability_test.use_lightweight_servers=$USE_LIGHTWEIGHT_SERVERS,\
        scalability_test.server_count=$SERVER_COUNT,\
        scalability_test.storages_per_server=$STORAGES_PER_SERVER,\
        scalability_test.cameras_per_server=$CAMERAS_PER_SERVER,\
        scalability_test.users_per_server=$USERS_PER_SERVER,\
        scalability_test.properties_per_camera=$PROPERTIES_PER_CAMERA,\
        scalability_test.transactions_per_server_rate=$TRANSACTIONS_PER_SERVER_RATE,\
        scalability_test.merge_timeout=$MERGE_TIMEOUT,\
        scalability_test.message_bus_timeout=$MESSAGE_BUS_TIMEOUT,\
        scalability_test.transactions_stage_duration=$TRANSACTIONS_STAGE_DURATION" \
              --run-parameters="\
        use_lightweight_servers=$USE_LIGHTWEIGHT_SERVERS,\
        server_count=$SERVER_COUNT,\
        storages_per_server=$STORAGES_PER_SERVER,\
        cameras_per_server=$CAMERAS_PER_SERVER,\
        users_per_server=$USERS_PER_SERVER,\
        properties_per_camera=$PROPERTIES_PER_CAMERA,\
        transactions_per_server_rate=$TRANSACTIONS_PER_SERVER_RATE,\
        merge_timeout=$MERGE_TIMEOUT,\
        message_bus_timeout=$MESSAGE_BUS_TIMEOUT,\
        transactions_stage_duration=$TRANSACTIONS_STAGE_DURATION" \
              tests/scalability_test.py

            pytest_status="X$?"
          popd

          case "$pytest_status" in
          X0)
            echo "PyTest - All tests were collected and passed successfully"
            rm -f unstable.flag
            exit 0
          ;;
          X1)
            echo "PyTest - Tests were collected and run but some of the tests failed"
            touch unstable.flag
            exit 0
          ;;
          X2)
            echo "PyTest - Test execution was interrupted by the user"
            exit 2
          ;;
          X3)
            echo "PyTest - Internal error happened while executing tests"
            exit 3
          ;;
          X4)
            echo "PyTest - pytest command line usage error"
            exit 4
          ;;
          X5)
            echo "PyTest - 	No tests were collected"
            exit 5
          ;;
          esac

    publishers:
    - mercurial/rm-repo-if-broken
    - set-unstable-if-marked
    - description-setter:
        regexp: "'PyTest - (.*)'"
        regexp-for-failed: "'PyTest - (.*)'"
    - failure-email:
        email-recipients: '{build_watchers}'
    - fixed-email:
        email-recipients: '{build_watchers}'
