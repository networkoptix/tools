- job-template:
    name: '__{pipeline}.{version}.param-resolver'
    id: param-resolver
    concurrent: false
    node: runner

    properties:
    - authorization-{pipeline}-system

    parameters:
    - string: { name: REQUESTED_BY                   }
    - string: { name: BUILD_DESCRIPTION              }
    # do we really need it?
    # may be it's because it's used directly by envvars/freeze-commit-if(var=val) macro
    # and also as parameter to one of builders
    - string: { name: BRANCH                         }

    - string: { name: VMS_BUILD_CHOICE               }
    - string: { name: VMS_BUILD_CHOICE_OPTION        }
    - string: { name: PLATFORMS                      }
    - string: { name: CUSTOMIZATIONS                 }
    - string: { name: CLOUD_GROUP                    }
    - string: { name: BETA                           }
    - string: { name: HARDWARE_SIGNING               }
    - string: { name: TRUSTED_TIMESTAMPING           }
    - string: { name: CUSTOM_CMAKE_PARAMETERS        }

    - string: { name: UT_ENABLED                     }

    - string: { name: FT_ENABLED                     }
    - string: { name: FT_COMMIT_CHOICE               }
    - string: { name: FT_COMMIT_CHOICE_OPTION        }
    - string: { name: TEST_SELECT_EXPR               }
    - string: { name: TEST_LIST                      }

    - string: { name: RCT_ENABLED                    }
    - string: { name: RCT_COMMIT_CHOICE              }
    - string: { name: RCT_COMMIT_CHOICE_OPTION       }
    - string: { name: RCT_CAMERA_FILTER              }

    - string: { name: ST_ENABLED                     }
    - string: { name: ST_SCENARIOS                   }
    - string: { name: ST_COMMIT_CHOICE               }
    - string: { name: ST_COMMIT_CHOICE_OPTION        }

    builders:
    - cleaners/custom-clean-workspace:
        keep_files: [ devtools, nx_vms ]

    # === GLOBALS ===

    - shell: |
        #!bash
        set -ex
        echo "BRANCH=$BRANCH" >> RUNNER_ARGS.envvars

    # === BUILD ===

    # resolve values:
    # - BUILD_IDENTITY
    # - NX_VMS_COMMIT
    # - BUILD_WEBADMIN
    # - BUILD_INSTALLER
    # (based on VMS_BUILD_CHOICE and VMS_BUILD_CHOICE_OPTION, see macros above)

    - shell: |
        #!bash
        set -ex
        echo "NX_VMS_COMMIT=" > NX_VMS_COMMIT.envvar
        echo "BUILD_IDENTITY=" > BUILD_IDENTITY.envvar
    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$VMS_BUILD_CHOICE'
        condition-string2: 'VMS_NEW_BUILD_BY_COMMIT'
        steps:
        - envvars/request-new-build-identity:
            pipeline: '{pipeline}'
        - freeze-nx-vms-commit(remote):
            pipeline: '{pipeline}'
            branch: $BRANCH
            commit-to-freeze: $VMS_BUILD_CHOICE_OPTION
            commit-varname: NX_VMS_COMMIT
        - shell: |
            #!bash
            set -ex
            cat  BUILD_IDENTITY.envvar >> RUNNER_ARGS.envvars
            cat  NX_VMS_COMMIT.envvar  >> RUNNER_ARGS.envvars
            echo BUILD_WEBADMIN=true >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=true >> RUNNER_ARGS.envvars

    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: strings-match
          condition-string1: '$VMS_BUILD_CHOICE'
          condition-string2: 'VMS_NEW_BUILD_BY_COMMIT'
        steps:

        - import-envvars-if(var=val):
            var: VMS_BUILD_CHOICE
            val: VMS_EXIST_BUILD_BY_COMMIT
            from: '{pipeline}.{version}.vms.runner'
            envvars: [ NX_VMS_COMMIT, BUILD_IDENTITY ]
            param_filter: NX_VMS_COMMIT=$VMS_BUILD_CHOICE_OPTION

        - import-envvars-if(var=val):
            var: VMS_BUILD_CHOICE
            val: VMS_EXIST_BUILD_BY_IDENTITY
            from: '{pipeline}.{version}.vms.runner'
            envvars: [ NX_VMS_COMMIT, BUILD_IDENTITY ]
            param_filter: BUILD_IDENTITY=$VMS_BUILD_CHOICE_OPTION

        - import-envvars-if(var=val):
            var: VMS_BUILD_CHOICE
            val: VMS_EXISTING_BUILD_FROM_STABLE_PUSH
            from: '{pipeline}.{version}.preset.on-push-vms'
            envvars: [ NX_VMS_COMMIT, BUILD_IDENTITY ]

        - import-envvars-if(var=val):
            var: VMS_BUILD_CHOICE
            val: VMS_EXISTING_BUILD_FROM_STABLE_NIGHTLY
            from: '{pipeline}.{version}.preset.nightly-vms'
            envvars: [ NX_VMS_COMMIT, BUILD_IDENTITY ]

        - import-latest-envvar-if(var=val):
            var: VMS_BUILD_CHOICE
            val: VMS_EXISTING_BUILD_FROM_STABLE_PUSH_OR_NIGHTLY
            job_1: '{pipeline}.{version}.preset.on-push-vms'
            job_2: '{pipeline}.{version}.preset.nightly-vms'
            envvar: NX_VMS_COMMIT

        - shell: |
            #!bash
            set -ex
            cat  BUILD_IDENTITY.envvar >> RUNNER_ARGS.envvars
            cat  NX_VMS_COMMIT.envvar  >> RUNNER_ARGS.envvars
            echo BUILD_WEBADMIN=false >> RUNNER_ARGS.envvars
            echo BUILD_INSTALLER=false >> RUNNER_ARGS.envvars

        # check vars are set
        - shell: |
            #!bash
            set -ex
            for var in BUILD_IDENTITY NX_VMS_COMMIT ; do
              if [[ "$(cat $var.envvar)" == "$var=" ]]; then
                echo "Failed to resolve $var"
                exit 1
              fi
            done

    # resolve/map values:
    # - PLATFORMS
    # - CUSTOMIZATIONS
    # - CLOUD_GROUP
    # - BETA
    # - HARDWARE_SIGNING
    # - TRUSTED_TIMESTAMPING
    # - CUSTOM_CMAKE_PARAMETERS

    - shell: |
        #!bash
        echo "PLATFORMS=$PLATFORMS" >> RUNNER_ARGS.envvars
        echo "CUSTOMIZATIONS=$CUSTOMIZATIONS" >> RUNNER_ARGS.envvars
        echo "CLOUD_GROUP=$CLOUD_GROUP" >> RUNNER_ARGS.envvars
        echo "BETA=$BETA" >> RUNNER_ARGS.envvars
        echo "HARDWARE_SIGNING=$HARDWARE_SIGNING" >> RUNNER_ARGS.envvars
        echo "TRUSTED_TIMESTAMPING=$TRUSTED_TIMESTAMPING" >> RUNNER_ARGS.envvars
        echo "CUSTOM_CMAKE_PARAMETERS=$CUSTOM_CMAKE_PARAMETERS" >> RUNNER_ARGS.envvars

    # === UNITTESTS ===

    # resolve/map values:
    # - RUN_UNITTESTS

    - shell: |
        #!bash
        if [ $UT_ENABLED == 'OFF' ] ; then
          echo "RUN_UNITTESTS=false" >> RUNNER_ARGS.envvars
        else
          echo "RUN_UNITTESTS=true" >> RUNNER_ARGS.envvars
        fi

    # === FUNCTESTS ===

    # resolve/map values:
    # - RUN_FUNCTESTS
    # - NX_FUNCTESTS_COMMIT
    # - TEST_SELECT_EXPR
    # - TEST_LIST
    # (based on FT_ENABLED, FT_COMMIT_CHOICE and FT_COMMIT_CHOICE_OPTION)

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$FT_ENABLED'
        condition-string2: 'OFF'
        steps:
        - shell: |
            #!bash
            echo "RUN_FUNCTESTS=false" >> RUNNER_ARGS.envvars
            echo 'NX_FUNCTESTS_COMMIT=' > NX_FUNCTESTS_COMMIT.envvar
            echo "TEST_SELECT_EXPR=" >> RUNNER_ARGS.envvars
            echo "TEST_LIST=" >> RUNNER_ARGS.envvars

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$FT_ENABLED'
        condition-string2: 'ON'
        steps:
        # in case if we won't find any commits, we don't want to fail calc
        - shell: echo 'NX_FUNCTESTS_COMMIT=' > NX_FUNCTESTS_COMMIT.envvar

        - envvars/freeze-commit-if(var=val):
            pipeline: '{pipeline}'
            var: FT_COMMIT_CHOICE
            val: FT_OTHER_COMMIT
            commit_to_freeze: $FT_COMMIT_CHOICE_OPTION
            as: NX_FUNCTESTS_COMMIT

        - import-envvars-if(var=val):
            var: FT_COMMIT_CHOICE
            val: FT_STABLE_PUSH
            from: '{pipeline}.{version}.preset.on-push-ft'
            envvars: [ NX_FUNCTESTS_COMMIT ]

        - import-envvars-if(var=val):
            var: FT_COMMIT_CHOICE
            val: FT_STABLE_NIGHTLY
            from: '{pipeline}.{version}.preset.nightly-ft'
            envvars: [ NX_FUNCTESTS_COMMIT ]

        - import-latest-envvar-if(var=val):
            var: FT_COMMIT_CHOICE
            val: FT_STABLE_PUSH_OR_NIGHTLY
            job_1: '{pipeline}.{version}.preset.on-push-ft'
            job_2: '{pipeline}.{version}.preset.nightly-ft'
            envvar: NX_FUNCTESTS_COMMIT

        - shell: |
            #!bash
            echo "RUN_FUNCTESTS=true" >> RUNNER_ARGS.envvars
            cat NX_FUNCTESTS_COMMIT.envvar >> RUNNER_ARGS.envvars
            echo "TEST_SELECT_EXPR=$TEST_SELECT_EXPR" >> RUNNER_ARGS.envvars
            echo "TEST_LIST=$TEST_LIST" >> RUNNER_ARGS.envvars

    # === REAL CAMERA TESTS ===

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$RCT_ENABLED'
        condition-string2: 'OFF'
        steps:
        - shell: |
            echo "RUN_REALCAMERATESTS=false" >> RUNNER_ARGS.envvars
            echo "NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT=" > NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar
            echo "RCT_CAMERA_FILTER=$RCT_CAMERA_FILTER" >> RUNNER_ARGS.envvars

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$RCT_ENABLED'
        condition-string2: 'ON'
        steps:
        # in case if we won't find any commits, we don't want to fail calc
        - shell: echo 'NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT=' > NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar

        - envvars/freeze-commit-if(var=val):
            pipeline: '{pipeline}'
            var: RCT_COMMIT_CHOICE
            val: RCT_BY_COMMIT
            commit_to_freeze: $RCT_COMMIT_CHOICE_OPTION
            as: NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT

        - import-envvars-if(var=val):
            var: RCT_COMMIT_CHOICE
            val: RCT_STABLE_PUSH
            from: '{pipeline}.vms_3.2_release.preset.on-push-rct-to-vms_rct'
            envvars: [ NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT ]

        - import-envvars-if(var=val):
            var: RCT_COMMIT_CHOICE
            val: RCT_STABLE_NIGHTLY
            from: '{pipeline}.{version}.preset.nightly-rct'
            envvars: [ NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT ]

        - import-latest-envvar-if(var=val):
            var: RCT_COMMIT_CHOICE
            val: RCT_STABLE_PUSH_OR_NIGHTLY
            job_1: '{pipeline}.{version}.preset.on-push-rct'
            job_2: '{pipeline}.{version}.preset.nightly-rct'
            envvar: NX_FUNCTESTS_COMMIT

        - shell: |
            #!bash
            echo "RUN_REALCAMERATESTS=true" >> RUNNER_ARGS.envvars
            cat NX_VMS_REAL_CAMERA_TEST_FRAMEWORK_COMMIT.envvar >> RUNNER_ARGS.envvars
            echo "RCT_CAMERA_FILTER=$RCT_CAMERA_FILTER" >> RUNNER_ARGS.envvars

    # ===SCALABILITY TESTS ===

    - shell: |
        echo "ST_ENABLED=$ST_ENABLED" >> RUNNER_ARGS.envvars
        echo "ST_SCENARIOS=$ST_SCENARIOS" >> RUNNER_ARGS.envvars

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$ST_ENABLED'
        condition-string2: 'OFF'
        steps:
        - shell:
            #!bash
            echo 'ST_COMMIT=' > ST_COMMIT.envvar

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '$ST_ENABLED'
        condition-string2: 'ON'
        steps:
        # in case if we won't find any commits, we don't want to fail calc
        - shell: echo 'ST_COMMIT=' > ST_COMMIT.envvar

        - envvars/freeze-commit-if(var=val):
            pipeline: '{pipeline}'
            var: ST_COMMIT_CHOICE
            val: ST_LATEST
            commit_to_freeze: $BRANCH
            as: ST_COMMIT

        - import-latest-envvar-if(var=val):
            var: ST_COMMIT_CHOICE
            val: ST_STABLE
            job_1: '{pipeline}.{version}.preset.on-push-ft'
            job_2: '{pipeline}.{version}.preset.nightly-ft'
            envvar: NX_FUNCTESTS_COMMIT
            as: ST_COMMIT

        - envvars/freeze-commit-if(var=val):
            pipeline: '{pipeline}'
            var: ST_COMMIT_CHOICE
            val: ST_BY_COMMIT
            commit_to_freeze: $ST_COMMIT_CHOICE_OPTION
            as: ST_COMMIT

        - shell: |
            #!bash
            cat ST_COMMIT.envvar >> RUNNER_ARGS.envvars

        - shell: |
            #!bash
            set -ex
            for var in ST_COMMIT ; do
              if [[ "$(cat $var.envvar)" == "$var=" ]]; then
                echo "Failed to resolve $var"
                exit 1
              fi
            done

    publishers:
    - description-setter:
        regexp-for-failed: "'(Failed to resolve .*)'"
    - archive:
        artifacts: '*.envvar'
        allow-empty: false
        fingerprint: true
    - archive:
        artifacts: '*.envvars'
        allow-empty: false
        fingerprint: true
