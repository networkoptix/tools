- job-template:
    name: '{pipeline}.{version}.{project}.trigger.blinking-tests'

    description: |
      Trigger the same build & test multiple times to find out
      which tests will blink during run

      Requires commit sha which can be built
      It's recommended to choose sha that have "green" tests

      This is dump trigger (does not contain any logic)

    node: 'runner'

    default_build_description: Weekly blinking tests
    clean_workspace: ''
    clean_build: ''
    platforms: linux-x64
    customizations: default
    build_webadmin: true
    build_installer: true
    run_unittests: true
    run_functests: false
    run_realcameratests: ''

    properties:
    - authorization-{pipeline}-system

    parameters:
    - p_BUILD_DESCRIPTION:
        default: '{default_build_description}'
    - parameter-separator/simple:
        header: Build parameters
    - p_CLEAN_WORKSPACE:
        default: '{clean_workspace}'
    - p_CLEAN_BUILD:
        default: '{clean_build}'
    - string:
        name: PLATFORMS
    - string:
        name: CUSTOMIZATIONS
    - p_BUILD_WEBADMIN:
        default: '{build_webadmin}'
    - p_BUILD_INSTALLER:
        default: '{build_installer}'
    - p_RUN_UNITTESTS:
        default: '{run_unittests}'
    - p_RUN_FUNCTESTS:
        default: '{run_functests}'
    - p_RUN_REALCAMERATESTS:
        default: '{run_realcameratests}'
    - p_USE_BUILD_IDENTITY:
        default: !j2: '{{ use_build_identity | default("NEW") }}'
    - p_USE_NX_VMS_COMMIT:
        default: '{use_nx_vms_commit}'

    triggers:
    - timed: "{timer}"

    wrappers:
    - timestamps
    - timeout:
        timeout: 5 # min
        fail: true
        type: absolute

    builders:
    - decorators/set-custom-build-description

    # TODO: Make recursive or trigger w/ groovy, for ex:
    # def params = [new StringParameterValue('paramName', paramValue) ]
    # def job = Hudson.instance.getJob(jobName)
    # println "Launching ${job.fullName}"
    # def future = job.scheduleBuild2(0, new Cause.UpstreamCause(build), new ParametersAction(params))
    # future.get()


    - trigger-builds:
      - project: '{pipeline}.{version}.{project}.trigger.custom'
        current-parameters: true
        predefined-parameters: |
          REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
          UPSTREAM_JOB_NAME=$JOB_NAME
          BUILD_DESCRIPTION=$BUILD_DESCRIPTION
        block: false # !! don't wait
