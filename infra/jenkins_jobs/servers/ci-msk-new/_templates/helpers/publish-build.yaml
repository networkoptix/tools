- job-template:
    name: '{pipeline}.helper.publish-build'
    description: |
      <pre>
      ================================================================================
      Publish build
      ================================================================================

      JOB MAINTAINERS
        {job_maintainers}
        (notified by email on build failures)

      SOURCES
        devtools/infra/jenkins_jobs/servers/templates/helpers/publish-build.yaml

      --------------------------------------------------------------------------------

      This job serves for publishing components into artifacts repository.

      We have the same jenkins user on each node. But we don't want to mess up with
      permissions and credentials and to find ourselves in situation when artifact
      repo is writeable on nodes where it should be readonly.

      Because of this and few other reasons related to unstable rsync, permissions,
      lack of bash support on windows, etc, we have implemented publishing artifacts in
      "reverse" direction.

      We also want to be 100% sure that there are no processes that working on the same
      branch of artifacts because this will corrupt artifacts with high probability.
      (this mean that this job has no more than 1 build at a time)

      The idea is that job that's being build, schedules another job (this job) to
      consume all artifacts/components produced by build.

      Build has following parameters

      * Standard stuff related to pipeline, platform and others
      * Source "coordinates" - path on remote host, ssh user and other service data
      * List of components/filters used for filtering only stuff that required

      To bypass pipeline descriptions from upstream builds there is BUILD_DESCRIPTION
      parameter. A string passed to BUILD_DESCRIPTION will be set as one of the lines
      of build description.

      Every build is connected with upstream builds by Jenkins internals, but due to
      some internal limitations it's recommended to use REQUESTED_BY argument.
      Trigger builds with some unique marker like $JOB_NAME-$BUILD_ID and then query
      latest artifact that has REQUESTED_BY equal to marker.

      --------------------------------------------------------------------------------
      </pre>
    node: repository-ops
    concurrent: false  # important

    properties:
    - authorization-{pipeline}-system
    - priority-sorter:
        priority: !j2: '{{ pipeline_priority }}'
    # this job is heavily used on each pipeline build, so we need large
    # GC timeouts in order to keep all builds for recent pipelines
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 500
        artifact-days-to-keep: 30
        artifact-num-to-keep: 500

    parameters:
    - p_REQUESTED_BY
    - p_BUILD_DESCRIPTION:
        default: ''
    # Parameters related to artifact location in repository
    - p_BRANCH
    - p_BUILD_IDENTITY
    - p_PLATFORM
    - p_CUSTOMIZATION
    - p_NX_VMS_COMMIT
    - p_COMPONENTS
    # Parameter that defines path to operate it's actually remote path
    - p_LOCAL_PATH
    # Utility parameters used to describe connection details
    - p_NODE_SSH_CONNECTION
    - p_SSH_USER

    - administrative-section-separator
    - string:
        name: FORCE_PUSH
        default: 'false'
        description: "Delete existing artifacts before pushing."
    - p_PIPELINE(hidden):
        default: '{pipeline}'

    wrappers:
    - build-name:
        name: '#$BUILD_ID $BUILD_IDENTITY $BRANCH $PLATFORM $CUSTOMIZATION'
    - timestamps
    - timeout:
        # normally, should complete in 2-10 min
        timeout: 30 # min
        fail: true
        type: absolute
    - ssh-agent-credentials:
        users:
        - jenkins

    builders:
    - inject:
        properties-content: |
          JUNKSHOP_URL={junkshop_base_url}/project/{junkshop_project_name}/$BRANCH/$BUILD_IDENTITY
          REPOSITORY_URL={artifacts_base_url}/$PIPELINE/$BRANCH/$BUILD_IDENTITY/$CUSTOMIZATION/$PLATFORM
    - decorators/set-custom-build-description
    - validators/required-params:
        params: >-
          REQUESTED_BY
          BRANCH
          PIPELINE
          BUILD_IDENTITY
          CUSTOMIZATION
          COMPONENTS
    - inject:
        properties-content: |
          REPOSITORY_PATH={artifact_repository_base_path}/$PIPELINE/$BRANCH/$BUILD_IDENTITY/$CUSTOMIZATION/$PLATFORM
          REPOSITORY_ROOT_PATH={artifact_repository_base_path}/$PIPELINE/$BRANCH/$BUILD_IDENTITY
          REPOSITORY_URL={artifacts_base_url}/$PIPELINE/$BRANCH/$BUILD_IDENTITY/$CUSTOMIZATION/$PLATFORM

    - shell: |
        #!bash
        if [ -d "${{REPOSITORY_PATH}}" ] ; then
          if [ ${{FORCE_PUSH}} == 'true' ] ; then
            echo "Path exists, renaming existing build just in case"
            mv "${{REPOSITORY_PATH}}" "${{REPOSITORY_PATH}}.old.${{BUILD_ID}}"
          else
            echo "Path exists, FAIL"
            exit 1
          fi
        fi

    - rsync/download:
        host: '$(echo "${{NODE_SSH_CONNECTION}}" | cut -d " " -f 3)'
        port: '$(echo "${{NODE_SSH_CONNECTION}}" | cut -d " " -f 4)'
        user: '${{SSH_USER}}'
        src_path: '${{LOCAL_PATH}}'
        dst_path: '${{REPOSITORY_PATH}}'
        components: '${{COMPONENTS}}'
    - shell:  !include-raw-escape: ../../builders/organize_repo.sh

    publishers:
    - description-setter:
        description: >-
          <a href='$REPOSITORY_URL'> Artifacts </a>,
          <a href='$JUNKSHOP_URL'> Junkshop </a>
    - failure-email-helpers(maintainers):
        email-recipients: '{job_maintainers}'
