- job-template:
    name: '{pipeline}.{version}.{project}.distribution.{platform}.{customization}.build'
    id: distribution-build
    description: |
      <pre>
      ================================================================================
      Build Installer for {platform} with {customization} customization
      ================================================================================

      JOB MAINTAINERS
        {job_maintainers}
        (NOT notified by email on build failures)
      BUILD WATCHERS
        {build_watchers}
        (notified by email on build failures)

      --------------------------------------------------------------------------------

      This job builds installer that also includes webadmin binaries with small
      exception for few platforms where there is no webserver included into installer
      (this case is not handled yet by this job)

      --------------------------------------------------------------------------------

      This job consumes few groups of parameters.

      Parameters related to workspace cleaning logic
      * CLEAN_WORKSPACE
      * CLEAN_CLONE
      * CLEAN_BUILD

      Parameters related to pointing artifacts in repository and development process
      * BUILD_IDENTITY (that determines release id or build_number used for releases)
      * NX_VMS_COMMIT exact commit of sources taht produced this build.

      --------------------------------------------------------------------------------
      </pre>
    node: '{distribution_build_node}'
    # NOTE: There is a bug in our build framework that has regex like '_{platform}' therefore
    # '_{platform}' combination is unallowed
    workspace: !j2: '{{ "__debug__" if __debug__ else "" }}build{{
      "-thr${EXECUTOR_NUMBER}" if build_distribution_concurrently
      or build_distribution_custom_suffix == "" else "" }}-distribution-{{
      platform }}{{ build_distribution_custom_suffix }}'

    concurrent: '{build_distribution_concurrently}'
    build_distribution_custom_suffix: '-$BRANCH'

    use_webadmin: 'true' # defaults to build installer that requires webadmin
    build_distribution_concurrently: true

    cmake_build_extra_args: ''

    # this is a list of vars that not require during build process and should be removed
    envvars_to_unset_during_build: >-
      CMAKE_CONFIGURE_COMMAND
      CLEAN_WORKSPACE
      BUILD_URL
      ROOT_BUILD_CAUSE_TIMERTRIGGER
      TRIGGERED_BUILD_RUN_COUNT_helper_sync_hg
      HUDSON_SERVER_COOKIE
      MERCURIAL_REVISION_NUMBER
      SSH_CLIENT
      BUILD_TAG
      LAST_TRIGGERED_JOB_NAME
      BUILD_CONFIG_SHA_OLD
      TRIGGERED_JOB_NAMES
      ROOT_BUILD_CAUSE
      CLEAN_CLONE
      TRIGGERED_BUILD_NUMBERS_helper_sync_hg
      CLEAN_BUILD
      JOB_URL
      TRIGGERED_BUILD_RUN_COUNT_helper_pull_component
      MERCURIAL_REVISION_SHORT
      RUN_CHANGES_DISPLAY_URL
      BUILD_CAUSE_UPSTREAMTRIGGER
      TRIGGERED_BUILD_NUMBER_helper_freeze_build_config
      NX_VMS_COMMIT
      TRIGGERED_BUILD_NUMBER_helper_sync_hg
      BUILD_DESCRIPTION
      USE_WEBADMIN
      TRIGGERED_BUILD_NUMBERS_helper_freeze_build_config
      TRIGGERED_BUILD_RESULT_helper_freeze_build_config
      RUN_DISPLAY_URL
      TRIGGERED_BUILD_NUMBERS_helper_pull_component
      TRIGGERED_BUILD_RESULT_helper_pull_component
      JOB_NAME
      BUILD_DISPLAY_NAME
      RUNNER_URL
      BUILD_ID
      BUILD_CAUSE
      TRIGGERED_BUILD_NUMBER_helper_pull_component
      TRIGGERED_BUILD_RUN_COUNT_helper_freeze_build_config
      JOB_BASE_NAME
      MERCURIAL_REVISION
      JENKINS_SERVER_COOKIE
      BUILD_CONFIG_SHA
      NODE_LABELS
      LOGNAME
      SSH_CONNECTION
      NODE_NAME
      COPYARTIFACT_BUILD_NUMBER_HELPER_FREEZE_BUILD_CONFIG
      JOB_DISPLAY_URL
      BUILD_NUMBER
      HUDSON_COOKIE
      JUNKSHOP_PROJECT_NAME
      JUNKSHOP_URL
      MERCURIAL_REPOSITORY_URL
      TRIGGERED_BUILD_RESULT_helper_sync_hg

    properties:
    - authorization-{pipeline}-system
    - priority-sorter:
        priority: !j2: '{{ pipeline_priority }}'
    - build-discarder:
        days-to-keep: 30
        num-to-keep: 100
        artifact-days-to-keep: 30
        artifact-num-to-keep: '{default_artifact_num_to_keep}'

    parameters:
    - p_BUILD_DESCRIPTION:
        default: ''
    - p_CLEAN_WORKSPACE:
        default: false
    - p_CLEAN_CLONE
    - p_CLEAN_BUILD:
        default: false
    - p_BUILD_IDENTITY
    - p_BRANCH:
        default: '{default_branch}'
    - p_NX_VMS_COMMIT:
        default: '{default_branch}'
    - p_CLOUD_GROUP:
        default: test
    - p_BETA:
        default: ''
    - p_HARDWARE_SIGNING:
        default: 'OFF'
    - p_TRUSTED_TIMESTAMPING:
        default: 'OFF'
    - p_CUSTOM_CMAKE_PARAMETERS:
        default: ''
    - p_RUNNER_URL
    - string:
        name: CMAKE_CONFIGURE_COMMAND
        default: !j2: >-
          {%- set _cmake_configure_beta            = cmake_configure_beta            | default("") -%}
          {%- set _cmake_configure_developer_build = cmake_configure_developer_build | default("") -%}
          {#- TODO: default("$CLOUD_GROUP") -#}
          {%- set _cmake_configure_cloud_group     = cmake_configure_cloud_group     | default("") -%}
          {%- set _cmake_configure_generator       = cmake_configure_generator       | default("") -%}
          {%- set _cmake_configure_target_device   = cmake_configure_target_device   | default("") -%}
          {%- set _cmake_configure_customization   = cmake_configure_customization   | default("") -%}
          {{ "cmake" }}
          {{ "-Dbeta="            + _cmake_configure_beta            if _cmake_configure_beta            != "" else "" }}
          {{ "-DdeveloperBuild="  + _cmake_configure_developer_build if _cmake_configure_developer_build != "" else "" }}
          {{ "-DcloudGroup="      + _cmake_configure_cloud_group     if _cmake_configure_cloud_group     != "" else "" }}
          {{ "-G '" + _cmake_configure_generator + "'"               if _cmake_configure_generator       != "" else "" }}
          {{ "-DtargetDevice="    + _cmake_configure_target_device   if _cmake_configure_target_device   != "" else "" }}
          {{ "-Dcustomization="   + _cmake_configure_customization   if _cmake_configure_customization   != "" else "" }}
          {{ cmake_configure_args_global    if cmake_configure_args_global   | default("") != "" else "" }}
          {{ cmake_configure_args_platform  if cmake_configure_args_platform | default("") != "" else "" }}
          {{ cmake_configure_args_customization }}
          -DsigningServer=http://192.168.13.15:8080
          -DbuildNumber=$BUILD_IDENTITY
          -DcustomWebAdminPackageDirectory=../server-external
    - string:
        name:  CMAKE_BUILD_COMMAND
        # FIXME: --config should be defined in project
        default: >-
          cmake --build . --config Release {cmake_build_extra_args}
    - p_PIPELINE(hidden):
        default: '{pipeline}'
    - p_CUSTOMIZATION(hidden):
        default: '{customization}'
    - p_PLATFORM(hidden):
        default: '{platform}'
    - hidden:
        name: USE_WEBADMIN
        default: '{use_webadmin}'

    wrappers:
    - timestamps
    - timeout:
        # normally, should complete in 7-30 min
        timeout: 90 # min
        fail: true
        type: absolute
    - workspace-cleanup:
        check-parameter: CLEAN_WORKSPACE

    # STAGE: PRE-SCM
    # ========================================

    - pre-scm-buildstep:
        failOnError: true
        buildsteps:
        - mercurial/import-repo-if-missing:
            name: nx_vms
            branch: $BRANCH
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            pipeline: '{pipeline}'
            basedir: $WORKSPACE
        # this is an ugly huck to finally close the problem with long filenames in devtools
        - delete-files(on-windows):
            files: devtools
        - mercurial/import-repo-if-missing:
            name: devtools
            branch: '{devtools_revision}'
            platform: $PLATFORM
            customization: $CUSTOMIZATION
            pipeline: '{pipeline}'
            basedir: $WORKSPACE

    # STAGE: SCM
    # ========================================

    scm:
    - mercurial/local-mirror:
        name: nx_vms
        revision: '$NX_VMS_COMMIT'

    builders:
    - mercurial/mark-successful-checkout
    - inject:
        properties-content: |
          JUNKSHOP_URL={junkshop_base_url}/project/{junkshop_project_name}/$BRANCH/$BUILD_IDENTITY
    - decorators/set-custom-build-description
    - build-name-setter:
        template: '#$BUILD_ID $BRANCH-$BUILD_IDENTITY@$NX_VMS_COMMIT'
        macro: true

    # At first, calculate sha for build config files
    # since this job is crossplatform it's safer to just trigger freeze commit
    # with linux executor than try to inplement cross-platform stuff

    # STAGE: CLEANUP
    # ========================================

    - conditional-step:
        condition-kind: strings-match
        condition-string1: '{clean_build_if_build_scripts_changed}'
        condition-string2: 'YES'
        steps:
        - trigger-builds:
          - project: '{pipeline}.helper.freeze-build-config'
            block: true
            predefined-parameters: |
              REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              BRANCH=$BRANCH
              CUSTOMIZATION=$CUSTOMIZATION
              PLATFORM=$PLATFORM
              BUILD_IDENTITY=$BUILD_IDENTITY
              BRANCH=$BRANCH
              NX_VMS_COMMIT=$NX_VMS_COMMIT
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION

        # Inject commit sha
        - copyartifact:
            project: '{pipeline}.helper.freeze-build-config'
            filter: 'BUILD_CONFIG_SHA.envvar'
            which-build: last-completed
            parameter-filters: REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
        - inject:
            properties-file: 'BUILD_CONFIG_SHA.envvar'

        # When there is no information related to prev build config
        # We will force to clean build dir
        - conditional-step:
            condition-kind: not
            condition-operand:
              condition-kind: file-exists
              condition-filename: 'BUILD_CONFIG_SHA_OLD.envvar'
              condition-basedir: workspace
            steps:
            - description-setter:
                description: |
                  Clean build is forced by missing BUILD_CONFIG_SHA_OLD.envvar
            - file-operations/folder-delete-operation:
                folder-path: 'build'

        # Once we have some info regarding oldbuild config, we'll check that
        # incremental build is applicable, if not, again remove build folder
        - conditional-step:
            condition-kind: file-exists
            condition-filename: 'BUILD_CONFIG_SHA_OLD.envvar'
            condition-basedir: workspace
            steps:
            - inject:
                properties-file: BUILD_CONFIG_SHA_OLD.envvar
            - conditional-step:
                condition-kind: not
                condition-operand:
                    condition-kind: strings-match
                    condition-string1: "${{BUILD_CONFIG_SHA}}"
                    condition-string2: "${{BUILD_CONFIG_SHA_OLD}}"
                steps:
                - description-setter:
                    description: >-
                        Clean build is forced by changed BUILD_CONFIG_SHA,
                        $BUILD_CONFIG_SHA_OLD -> $BUILD_CONFIG_SHA
                - file-operations/folder-delete-operation:
                    folder-path: 'build'

    # Optionally when special flag is set, we also remove build directory
    - conditional-step:
        condition-kind: boolean-expression
        condition-expression: '${{ENV,var="CLEAN_BUILD"}}'
        steps:
        - description-setter:
            description: |
              Clean build is forced by CLEAN_BUILD var ( $CLEAN_BUILD )
        - file-operations/folder-delete-operation:
            folder-path: 'build'
        - file-operations/folder-delete-operation:
            folder-path: 'packages'

    # create build dir if not exists or removed
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: file-exists
          condition-filename: 'build'
          condition-basedir: workspace
        steps:
        - file-operations/folder-create-operation:
            folder-path: 'build'

    # Once we completed checks related to CMakeLists.txt, store new value
    - file-operations/file-create-operation:
        file-name: BUILD_CONFIG_SHA_OLD.envvar
        file-content: BUILD_CONFIG_SHA_OLD=${{BUILD_CONFIG_SHA}}

    # Unconditionally ensure that all artifacts that may be left in workspace after
    # any previous build process are removed

    # Remove CMake caches
    - file-operations/file-delete-operation:
        includes: build/CMakeCache.txt
        excludes: ''

    # Remove any logs located in build dir since build dir is shared across customizations
    - file-operations/file-delete-operation:
        includes: 'build/**/*.log'
        excludes: ''

    # recreate build_logs folder
    - file-operations/folder-delete-operation:
        folder-path: 'build_logs'
    - file-operations/folder-create-operation:
        folder-path: 'build_logs'

    # Remove distrib folder
    - shell: |
        #!bash
        if [ -d build/distrib ] ; then
          rm -rf build/distrib
        fi
        if [ -d paxton-4.0/distrib ] ; then
          rm -rf paxton-4.0/distrib
        fi
        if [ -d paxton-4.6.2/distrib ] ; then
          rm -rf paxton-4.6.2/distrib
        fi
    - file-operations/folder-delete-operation:
        folder-path: 'build/distrib'

    # Run custom cleaner provided by development team
    # Currently there is custom cleaner file in mobile branches (and all branches where mobile is merged)
    # It's main purpose as of 21.06.2016 is to clean all built icons. The idea is that icons from one customization
    # must not be present while we are building other customization.
    # To simplify things we execute this file when it's present in workspace (see below)
    # anyways it's possible to override this file for other use cases.
    - vms/clear-cmake-build:
        __debug__: !j2: '{{ __debug__ }}'

    # STAGE: SETUP BUILD ENVIRONMENT
    # ========================================

    # Create build folder
    - shell: |
        #!bash
        set -ex
        mkdir -p 'build'
        rm -rf "./server-external"

    - conditional-step:
        condition-kind: boolean-expression
        # pull webadmin only when needed
        condition-expression: '${{ENV,var="USE_WEBADMIN"}}'
        steps:
        - trigger-builds:
          - project: '{pipeline}.helper.pull-component'
            predefined-parameters: |
              REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
              BUILD_DESCRIPTION=$BUILD_DESCRIPTION
              BRANCH=$BRANCH
              BUILD_IDENTITY=$BUILD_IDENTITY
              CUSTOMIZATION=default
              PLATFORM=universal
              COMPONENTS=server-external/
              SSH_USER=$USER
              LOCAL_PATH=$WORKSPACE/
              NODE_SSH_CONNECTION=$SSH_CONNECTION
            block: true
            block-thresholds:
              failure-threshold: FAILURE

    # STAGE: BUILD
    # ========================================

    - vms/cmake-configure:
        subject: vms
        __debug__: !j2: '{{ __debug__ }}'
        cmake_configure_project_root: ''
        cmake_configure_command: $CMAKE_CONFIGURE_COMMAND $CUSTOM_CMAKE_PARAMETERS
        envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
        build_dir: build

    - vms/ninja-clean:
        __debug__: !j2: '{{ __debug__ }}'

    - vms/cmake-build:
        subject: vms
        __debug__: !j2: '{{ __debug__ }}'
        envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
        build_dir: build

    # Paxton should be built on windows platforms only
    - conditional-step:
        condition-kind: shell
        condition-command: !j2: |
          #!bash
          set -ex
          test "X${OS}" == "XWindows_NT"
          test "{{ build_paxton | default("") }}" == 'YES'
        steps:

        # dotnet-4.0

        - vms/cmake-configure:
            subject: paxton-4.0
            __debug__: !j2: '{{ __debug__ }}'
            cmake_configure_project_root: 'client/paxton_plugin'
            # FIXME: Will fail on develop builds
            cmake_configure_command: >-
              cmake
              -DcodeSigning=ON
              -DhardwareSigning=$HARDWARE_SIGNING
              -DtrustedTimestamping=$TRUSTED_TIMESTAMPING
              -Dcustomization=$CUSTOMIZATION
              -DbuildNumber=$BUILD_IDENTITY
              -DdotNetFramework=v4.0
              -DsigningServer=http://192.168.13.15:8080
              $CUSTOM_CMAKE_PARAMETERS
            envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
            build_dir: build-paxton-4.0

        - vms/cmake-build:
            subject: paxton-4.0
            __debug__: !j2: '{{ __debug__ }}'
            envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
            build_dir: build-paxton-4.0

        # dotnet-4.6.2

        - vms/cmake-configure:
            subject: paxton-4.6.2
            __debug__: !j2: '{{ __debug__ }}'
            cmake_configure_project_root: 'client/paxton_plugin'
            # FIXME: Will fail on develop builds
            cmake_configure_command: >-
              cmake
              -DcodeSigning=ON
              -DhardwareSigning=$HARDWARE_SIGNING
              -DtrustedTimestamping=$TRUSTED_TIMESTAMPING
              -Dcustomization=$CUSTOMIZATION
              -DbuildNumber=$BUILD_IDENTITY
              -DdotNetFramework=v4.6.2
              -DsigningServer=http://192.168.13.15:8080
              $CUSTOM_CMAKE_PARAMETERS
            envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
            build_dir: build-paxton-4.6.2

        - vms/cmake-build:
            subject: paxton-4.6.2
            __debug__: !j2: '{{ __debug__ }}'
            envvars_to_unset_during_build: !j2: '{{ envvars_to_unset_during_build }}'
            build_dir: build-paxton-4.6.2


    # STAGE: PUBLISH
    # ========================================

    publishers:
    - mercurial/rm-repo-if-broken
    - archive:
        artifacts: '**/*.log'
        allow-empty: 'false'
        fingerprint: true

    - archive:
        artifacts: configure.sh,build.sh
        allow-empty: true

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on: [ SUCCESS, UNSTABLE, FAILURE ]
          build-steps:
          - shell: |
              #!bash
              mkdir -p ./build/build_logs
              mkdir -p ./build/distrib
              if [ -d ./build_logs ] ; then
                mv ./build_logs/* ./build/build_logs/
              fi
              if [ -d ./build-paxton-4.0/distrib ] ; then
                mv ./build-paxton-4.0/distrib/*      ./build/distrib/
              fi
              if [ -d ./build-paxton-4.0/build_logs ] ; then
                mv ./build-paxton-4.0/build_logs/* ./build/build_logs/
              fi
              if [ -d ./build-paxton-4.6.2/distrib ] ; then
                mv ./build-paxton-4.6.2/distrib/*      ./build/distrib/
              fi
              if [ -d ./build-paxton-4.6.2/build_logs ] ; then
                mv ./build-paxton-4.6.2/build_logs/* ./build/build_logs/
              fi

          # Depending on test distribution strategy, we have 2 options:
          # - unpacked in ./build/bin/*, ./build/lib/*, "as is"
          # - *unit_tests*.tar.gz or *unit_tests*.zip (depending on platform)
          # note COMPONENTS=... in next 2 section

          # Case *unit_tests* exists
          - conditionally-trigger(shell):
              shell: ls ./build/distrib/*unit_tests*
              project: '{pipeline}.helper.publish-build'
              parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BUILD_STATUS=passed
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                PIPELINE=$PIPELINE
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                LOCAL_PATH=$WORKSPACE/build/
                COMPONENTS=build_logs/,distrib/,current_config.py,build_info.txt,*.log
                NODE_SSH_CONNECTION=$SSH_CONNECTION
                SSH_USER=$USER

          # Case *unit_tests* does not exist, old branch/version
          - conditionally-trigger(shell-NOT):
              shell: ls ./build/distrib/*unit_tests*
              project: '{pipeline}.helper.publish-build'
              parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BUILD_STATUS=passed
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                PIPELINE=$PIPELINE
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                LOCAL_PATH=$WORKSPACE/build/
                COMPONENTS=build_logs/,distrib/,bin/,lib/,current_config.py,build_info.txt,*.log
                NODE_SSH_CONNECTION=$SSH_CONNECTION
                SSH_USER=$USER

          - description-setter:
              description: >-
                <a href='{artifacts_base_url}/$PIPELINE/$BRANCH/$BUILD_IDENTITY/$CUSTOMIZATION/$PLATFORM'> Artifacts </a>,
                <a href='$JUNKSHOP_URL'> Junkshop </a>

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on: [ SUCCESS ]
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.helper.build-reporter'
              block: false
              predefined-parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                PIPELINE=$PIPELINE
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_STATUS=passed
                RUNNER_URL=$RUNNER_URL

    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on: [ FAILURE ]
          build-steps:
          - trigger-builds:
            - project: '{pipeline}.helper.build-reporter'
              block: false
              predefined-parameters: |
                REQUESTED_BY=$JOB_NAME-$BUILD_NUMBER
                BUILD_DESCRIPTION=$BUILD_DESCRIPTION
                BRANCH=$BRANCH
                BUILD_IDENTITY=$BUILD_IDENTITY
                PIPELINE=$PIPELINE
                CUSTOMIZATION=$CUSTOMIZATION
                PLATFORM=$PLATFORM
                BRANCH=$BRANCH
                NX_VMS_COMMIT=$NX_VMS_COMMIT
                BUILD_STATUS=failed
                RUNNER_URL=$RUNNER_URL

    # after everything is published, delete results
    - postbuildscript:
        mark-unstable-if-failed: true
        builders:
        - role: SLAVE
          build-on: [ SUCCESS, UNSTABLE, FAILURE ]
          build-steps:
          - file-operations/folder-delete-operation:
              folder-path: 'build/distrib'

    - failure-email:
        email-recipients: '{build_watchers}'
    - fixed-email:
        email-recipients: '{build_watchers}'
