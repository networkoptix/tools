- project:
    name: release-pipeline

    # IMPORTANT NOTE: need to define in jenkins tools config section
    # We may probably replace that groovy incl groovy w/ python.
    groovy-version: groovy
    project: vms
    junk_shop_host: 10.0.0.160 # TODO: switch to '10.0.2.101'
    jenkins_host: http://10.0.0.112:8080 # TODO: switch after prod
    branch:
    - vms_3.2

    # SECTION. GLOBAL CONFIG
    # ============================================================

    # comma-separated list of emails to whom send notifications related to builds
    build-watchers: iremizov@networkoptix.com

    # block builds and wait for reporting job to report results
    synchronous-reporting: '' # false

    # artifact repository location on publish-node filesystem
    artifact_repository_base_path: '/mnt-stub/beta-builds/repository/v1'  # TODO: switch to /mnt/beta-builds
    # location of cache folder publish-node where mercurial repos are precached
    # this cache is required due to the fact that mercurial can't
    # fetch part of repo and always pulls everything (~3GB over atlantic)
    cached_hg_repository_base_path: '/mnt-stub/infra/cached-hg'  # TODO: switch to /mnt/infra

    artifact_repository_base_url: 'http://10.0.0.158/repository/v1/'
    junkshop_base_url: 'http://10.0.0.160'

    # TODO: insert $PIPELINE
    artifact_location_root_pattern: '${{BUILD_IDENTITY}}'
    artifact_location_full_pattern: '${{BUILD_IDENTITY}}/${{PLATFORM}}/${{CUSTOMIZATION}}'

    # TODO: testing -> $PIPELINE
    junkshop_location_root_pattern: 'project/testing/$BRANCH/$BUILD_IDENTITY'
    junkshop_location_full_pattern: 'project/testing/$BRANCH/$BUILD_IDENTITY'


    webadmin-build-node: webadmin-build
    commit-freeze-node: webadmin-build

    # We use some trick to reuse precompiled obj files.
    # Dirty builds run faster than clean and we are trying to optimize build speed.
    #
    # Given axes:
    #  platform         linux-64, linux-86, windows-86, ..
    #  branch           default, vms, vms_3.2, ..
    #  customization    default, hanwha, ..
    #
    # Optimization rules:
    #  changing platform       -> full rebuild
    #  changing branch         -> full rebuild (looks like)
    #  changing customization  -> partial rebuild
    #
    # The solution is:
    # 1. Keep platform x branch in separate workspaces
    # 2. Allow to build different customization in the same place
    # 3. Mess-up auto, release and custom pipelines into the same workspace (this may result in
    #    full rebuild in future, but anyways we may control build time and see this problem)
    #
    # Job specific:
    # According to prev. facts,
    # - all platform x branch variables are frozen in job
    # - all customization-related stuff is passed as arguments

    # NOTE: There is a bug in our build framework that has regex like '_{platform}' therefore
    # '_{platform}' combination is unallowed
    workspace: nx_build_thr${{EXECUTOR_NUMBER}}-{pipeline}-{platform}/

    # in some cases there is a "cleaner" script that does some actions inbetween dirty builds.
    # this path is optional but if it exists, cleaner will be invoked
    custom_cleaner_path: $WORKSPACE/nx_vms/build_utils/python/clear_cmake_build.py

    # Some cmake args are applicable for any builds they are applied at first
    # Run cmake -L / cmake -LH / cmake -LAH to see all configuration options
    cmake_configure_args_global: |
      CMAKE_EXECUTABLE=cmake
      CMAKE_ARG_beta=TRUE
      CMAKE_ARG_developerBuild=OFF
      CMAKE_ARG_cloudGroup=test
      CMAKE_ARG_rdepSync=ON
      # CMAKE_ARG_withTests=TRUE

    # SECTION. PIPELINE CONFIG
    # ============================================================

    pipeline:
    - release:
        # Pipeline-specific cmake arguments
        cmake_configure_args_pipeline:
          CMAKE_ARG_CMAKE_BUILD_TYPE=Release

    hg-pull-macro: hg-la

    # SECTION. PLATFORM CONFIG
    # ============================================================

    # REMINDER: runner will not change list of subprojects when
    # extra items are added or removed, so don't forget to change runner
    # template according to changes made here
    platform:
    # there is also edge1 platform, it's declared and commented in jobs section
    - linux-x64:
        # most of builds are linux cross-builds that built on "build-installer-linux"
        # here we make an anchor to avoid typos and other kind of missconfiguration in future
        installer-build-node: &linux_node build-installer-linux
        # There are some CMake args that aplicable only for particular platform
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
    - linux-x86:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=linux-x86
    - bananapi:
        installer-build-node: *linux_node
        cmake_configure_args_platform: |
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_targetDevice=bananapi
          CMAKE_ARG_withTests=OFF
    # TODO: Enable later when we'll be ready to test it.
    #
    # - bpi:
    #     installer-build-node: *linux_node
    #     cmake_configure_args_platform: |
    #       CMAKE_GENERATOR=Ninja
    #       CMAKE_ARG_targetDevice=bpi
    # - rpi:
    #     installer-build-node: *linux_node
    #     cmake_configure_args_platform: |
    #       CMAKE_GENERATOR=Ninja
    #       CMAKE_ARG_targetDevice=rpi
    # - tx1:
    #     installer-build-node: *linux_node
    #     cmake_configure_args_platform: |
    #       CMAKE_GENERATOR=Ninja
    #       CMAKE_ARG_targetDevice=tx1
    # + edge1

    # TODO: ios and android have own release cycles and branches, need to extract in other project
    # - android-arm:
    #     installer-build-node: *linux_node
    #     cmake_configure_args_platform: |
    #       CMAKE_GENERATOR=Ninja
    #       CMAKE_ARG_targetDevice=android-arm

    # -- windows platform --
    # FIXME: HOME,PATH and other vars are represented as win env.
    # But some other vars are linux-like.
    # Rsync goes mad ain result and nothing works.
    - win-x64: &windows_config
        installer-build-node: build-installer-windows
        hg-pull-macro: hg-la-anon
        cmake_configure_args_platform: |
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_EXECUTABLE=C:\\Program files\\CMake\\bin\\cmake.exe
          CMAKE_GENERATOR=Visual Studio 15 2017 Win64
          CMAKE_ARG_beta=ON
          CMAKE_ARG_addQtPdb=ON
          CMAKE_ARG_trustedTimestamping=OFF
          CMAKE_ARG_withClouds=OFF
          CMAKE_ARG_withPluginStubs=OFF
          CMAKE_ARG_withTests=ON
          CMAKE_TOOL=host=x64

    - win-x86:
        <<: *windows_config
        cmake_configure_args_platform: |
          CMAKE_ENV__MSPDBSRV_ENDPOINT_=executor-$EXECUTOR_NUMBER
          CMAKE_EXECUTABLE=C:\\Program files\\CMake\\bin\\cmake.exe
          CMAKE_GENERATOR=Visual Studio 15 2017
          CMAKE_ARG_addQtPdb=ON
          CMAKE_ARG_trustedTimestamping=OFF
          CMAKE_ARG_withClouds=OFF
          CMAKE_ARG_withPluginStubs=OFF
          CMAKE_ARG_withTests=ON


    # -- apple platform --

    - mac: &osx_config
        hg-pull-macro: hg-la-anon
        installer-build-node: build-installer-mac
        cmake_configure_args_platform: |
          CMAKE_EXECUTABLE=/usr/local/opt/cmake-3.10.2-Darwin-x86_64/CMake.app/Contents/bin/cmake
          CMAKE_GENERATOR=Ninja
          CMAKE_ARG_beta=ON
          CMAKE_ARG_codeSigning=OFF
    # TODO: ios and android have own release cycles and branches, need to extract in other project
    # - ios:
    #     <<: *osx_config
    #     cmake_configure_args_platform: |
    #       CMAKE_EXECUTABLE=/usr/local/opt/cmake-3.10.2-Darwin-x86_64/CMake.app/Contents/bin/cmake
    #       CMAKE_GENERATOR=Xcode
    #       CMAKE_ARG_targetDevice=ios

    # SECTION. CUSTOMIZATION CONFIG
    # ============================================================

    # TODO: There are some customization that may be build only on specific platform
    # there is no need to generate extra set of jobs that never gonna be triggered.
    # it looks like there are too few customization spec. cmake args and we may move such
    # rare customizations to platform enum.

    cmake_configure_args_customization: |
      CMAKE_ARG_customization=$CUSTOMIZATION

    customization:

    # TODO: Enable later when we'll be ready to test it.

    # REMINDER: runner will not change list of subprojects when
    # extra items are added or removed, so don't forget to change runner
    # template according to changes made here
    - default
    # - default_cn
    # - default_zh_CN
    # - cox
    # - digitalwatchdog
    # - digitalwatchdog_global
    - hanwha
    # - ipera
    # - ionetworks
    # - nutech
    # - ras
    # - senturian
    # - systemk
    # - tricom
    # - ust
    - vista
    # - vmsdemoblue
    # - vmsdemoorange
    # + digitalwatchdog

    # list of jobs to generate
    jobs:

    # HELPERS - syncronize and publish different stuff

    - helper.sync-hg
    - helper.pull-component
    - helper.push-component

    # TRIGGERS - main entry points

    - '{pipeline}.{branch}.vms.trigger.{preset}':
        preset:
        - example:
            detailed-job-description: |-
              This trigger serves for demo purposes and will be removed in future
            default-build-description: >-
              Manually triggered build
            platforms: linux-x64,linux-x86
            customizations: default,hanwha
        - nightly:
            detailed-job-description: |-
              This trigger serves for nigtly clean builds to verify the state of product
              It builds with corresponding schedule "{timer}".

              It should not be triggered manually excluding debugging of infra problems
              associated with only this trigger type.
            default-build-description: >-
              Nightly clean build for all platforms and customizations
              triggered automatically by timer
            platforms: linux-x64,linux-x86,bananapi,win-x86,win-x64,mac,edge1
            customizations: default,hanwha,vista,digitalwatchdog
            clean-build: true
            timer: '0 0 * * *'

    # RUNNER - root launcher of all builds

    - '{pipeline}.{branch}.vms.runner'

    # UTILITY - register commit, build identities and other

    - '{pipeline}.{branch}.vms.freeze_nx_vms_commit'
    - '{pipeline}.{counter_name}.generator':
        counter_name: build_number
        counter_var_name: BUILD_IDENTITY

    # BUILD AND TEST - main jobs

    - '{pipeline}.{branch}.vms.webadmin.universal.build'
    - '{pipeline}.{branch}.vms.installer.{platform}.{customization}.all'
    - '{pipeline}.{branch}.vms.installer.{platform}.{customization}.build'
    # Edge1 is a platform that's exclusive for digitalwatchdog.
    # add extra jobs for edge1 with digitalwatchdog customization
    - '{pipeline}.{branch}.vms.installer.{platform}.{customization}.all': &extra-edge1-platform
        platform:
        - edge1:
            installer-build-node: *linux_node
            cmake_configure_args_platform: |
              CMAKE_GENERATOR=Ninja
              CMAKE_ARG_targetDevice=edge1
        customization:
        - 'digitalwatchdog'
    - '{pipeline}.{branch}.vms.installer.{platform}.{customization}.build':
        <<: *extra-edge1-platform

    # Our tests work per-customization per-platform and not yet implemented
    # for all platforms, so list of jobs is reduced
    - 'installer-unittests-default':
        # TODO: Rework a bit this parameterization as well as probably build node parameterization
        platform:
        - linux-x86:
            unittest-node: unittests-linux
        - linux-x64:
            unittest-node: unittests-linux
        customization:
        - default
    - installer-unittests-windows:
        platform:
        - win-x64:
            unittest-node: unittests-windows
        - win-x86:
            unittest-node: unittests-windows
        customization:
        - default
    # REPORTERS - parse & upload logs, build and test information to outer services

    # utility job for reporting unittests reslts to junkshop
    - '{pipeline}.unittests-reporter'
    - '{pipeline}.build-reporter'
