# Simple wrapper that composes conditional-step and trigger-builds, so
# amount of boilerplate is reduced.
#
# Parameters:
# - shell - shell command to use as condition (exit 0 = true)
# - project - project to trigger (may be omitted)
# - parameters - predefined parameters for build
# - block - wait for completeion or not (defaults to true)
- builder:
    name: conditionally-trigger(shell)
    builders:
    - conditional-step:
        condition-kind: shell
        condition-command: !j2: '{{ shell }}'
        steps:
        - trigger-builds:
          - project: !j2: '{{ project | default("") }}'
            predefined-parameters:  !j2: '{{ parameters | default("") }}'
            # NOTE: JJB will not treat !j2: '{{ false }}' as false
            block:  !j2: "{{ 'true' if block | default(true) else '' }}"
            block-thresholds:
              failure-threshold: FAILURE

# The same as above, but triggers when shell exit != 0
- builder:
    name: conditionally-trigger(shell-NOT)
    builders:
    - conditional-step:
        condition-kind: not
        condition-operand:
          condition-kind: shell
          condition-command:  !j2: '{{ shell }}'
        steps:
        - trigger-builds:
          - project: !j2: '{{ project | default("") }}'
            predefined-parameters:  !j2: '{{ parameters | default("") }}'
            # NOTE: JJB will not treat !j2: '{{ false }}' as false
            block:  !j2: "{{ 'true' if block | default(true) else '' }}"
            block-thresholds:
              failure-threshold: FAILURE
