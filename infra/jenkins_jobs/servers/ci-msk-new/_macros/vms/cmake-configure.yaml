- builder:
    name: vms/cmake-configure
    builders:
    - shell: !j2: |
        #!bash
        set -x # set -e is is missing intentionally

        # Log file must not exist
        test ! -f "build_logs/cmake-configure-{{ subject }}.log"

        # Create bash script filled with args, unset too long envvars and
        # execute cmake command
        # ----------------------------------------------------------------------
        cat > configure-{{ subject }}.sh <<BUILDSCRIPT
        #!bash
        # set -xe is is missing intentionally
        SECONDS=0
        cmake --version

        # remove all extra env vars
        for ev in {{ envvars_to_unset_during_build }} ; do
          {% if __debug__ %}
          echo "Unsetting \${ev}=\${!ev}"
          {% endif %}
          unset \$ev
        done
        # add env vars
        # FIXME: deprecated
        export environment=\$WORKSPACE
        echo "Env is:"
        env
        echo "Configuring project"
        cd "build"
        {% set _cmake_configure_project_root = cmake_configure_project_root | default("") %}
        echo "Cmake command - {{ cmake_configure_command }} \$WORKSPACE/nx_vms{{ '/' + _cmake_configure_project_root if _cmake_configure_project_root != '' else '' }}"
        {{ cmake_configure_command }}  \$WORKSPACE/nx_vms{{ '/' + _cmake_configure_project_root if _cmake_configure_project_root != '' else '' }}
        ec=\$?
        echo "Took - \$SECONDS seconds"
        echo "Exit code - \$ec"
        exit "\$ec"
        BUILDSCRIPT
        # ----------------------------------------------------------------------
        cat configure-{{ subject }}.sh
        bash configure-{{ subject }}.sh 2>&1 | tee "build_logs/cmake-configure-{{ subject }}.log"
        # Abort if buildscript failed
        exit "${PIPESTATUS[0]}"
