- builder:
    name: repository/promote-to-daily
    builders:
    - shell: !j2: |
        #!bash
        set -ex

        REPOSITORY_ROOT_PATH="{{ artifact_repository_base_path }}/$PIPELINE/$BRANCH/$BUILD_IDENTITY"
        TARGET_ROOT="/mnt/beta-builds/daily/$BUILD_IDENTITY-$BRANCH"
        mkdir -p "$TARGET_ROOT"

        # add version file
        _version_file="$(find "$REPOSITORY_ROOT_PATH" -name build_info.txt | head -1)"
        _version="$(cat "$_version_file" | grep version | tail -1 | cut -f 2 -d '=')"
        echo "$_version" > "$TARGET_ROOT/version"

        # prepare file which will contain all processed items
        processed_items_file=$WORKSPACE/processed.txt
        rm -f $processed_items_file
        touch $processed_items_file

        linked_items_file=$WORKSPACE/linked.txt
        rm -f $linked_items_file
        touch $linked_items_file

        # display sources
        echo "Source:"
        tree $REPOSITORY_ROOT_PATH
        echo

        pushd $REPOSITORY_ROOT_PATH
          {# customization name does not affect mappings #}
          for customization in *  ; do
            pushd $customization
              {% for mapping in artifacts_to_daily_mappings %}
              {# process only known platforms and only when they exist #}
              if [ -d "{{ mapping.src }}/distrib" ] ; then
                pushd "{{ mapping.src }}/distrib"
                  {%- for mask in mapping.masks %}
                  {# check all masks and link files
                     we do ls, because mask may not expand, so we'll get incorrect filename #}
                  for file in $( ls {{ mask }} ) ; do
                    {# file may match against 2 or more masks, but we don't want to link it twice #}
                    if ! grep -Fx "$customization/{{ mapping.src }}/distrib/$file" "$processed_items_file" ; then
                      mkdir -p "$TARGET_ROOT/$customization/{{ mapping.dst }}"
                      echo     "$REPOSITORY_ROOT_PATH/$customization/{{ mapping.src }}/distrib/$file -> $TARGET_ROOT/$customization/{{ mapping.dst }}/$file" >> $linked_items_file
                      ln -f    "$REPOSITORY_ROOT_PATH/$customization/{{ mapping.src }}/distrib/$file"  "$TARGET_ROOT/$customization/{{ mapping.dst }}/$file"
                      echo "$customization/{{ mapping.src }}/distrib/$file" >> $processed_items_file
                    fi
                  done
                  {% endfor %}
                popd
              fi
              {% endfor %}
            popd
          done
        popd

        echo
        echo "Processed files:"
        cat $processed_items_file
        echo
        echo "links created:"
        cat $linked_items_file
        echo

        # display target
        echo "Target:"
        tree $TARGET_ROOT
        echo

        # hit depcon
        # curl "http://depcon-test.hdw.mx/releases/registerBuild?buildDirectory=$BUILD_IDENTITY-$BRANCH"
