# Builder for calculating latest commit for given set of two identities and
# commit files.
#
# Prameters:
# - identity_file_1, identity_file_2 â€” files with 2 build Identities from the
#   same identities pool (envvar file format, varnames does not matter)
# - envvar_file_1, envvar_file_2 - files with 2 commits crsp to identities files
#   (envvar file format, varnames does not matter)
# - identity_latest_varname - name of variable under which latest identity will
#   be placed, optional, if not present, identity will not be written
# - envvar_latest_varname - name of variable under which latest commit will
#   be placed, optional, if not present, commit will not be written
- builder:
    name: calculate-latest-envvar
    builders:
    - shell: !j2: |
        #!python
        import os.path
        identity_1 = 0
        identity_2 = 0
        if os.path.isfile('{{ identity_file_1 }}'):
            with open('{{ identity_file_1 }}') as f:
                identity_1 = int(f.read().strip().split('=', 1)[1])
                print "identity 1 -> ", identity_1
        if os.path.isfile('{{ identity_file_2 }}'):
            with open('{{ identity_file_2 }}') as f:
                identity_2 = int(f.read().strip().split('=', 1)[1])
                print "identity 2 -> ", identity_2
        identity_latest = max(identity_1, identity_2)
        print "Latest identity -> ", identity_latest

        if identity_latest == 0:
            print "Couldn't find any build satisfying requested criteria"
            exit 1

        if identity_latest == identity_1:
            with open('{{ envvar_file_1 }}') as f:
                envvar_latest = f.read().strip().split('=', 1)[1]
        else:
            with open('{{ envvar_file_2 }}') as f:
                envvar_latest = f.read().strip().split('=', 1)[1]

        {% if identity_latest_varname | default("") %}
        with open('{{ identity_latest_varname }}'.envvar, 'wt') as f:
            f.write('{{ identity_latest_varname }}={}'.format(identity_latest))
        {% endif %}
        {% if envvar_latest_varname | default("") %}
        with open('{{ envvar_latest_varname }}'.envvar, 'wt') as f:
            f.write('{{ envvar_latest_varname }}={}'.format(envvar_latest))
        {% endif %}
