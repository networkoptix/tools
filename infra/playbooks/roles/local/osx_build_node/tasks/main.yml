# TODO: 1. set computer name
# TODO: - sudo scutil --set HostName <new host name>
# TODO: - sudo scutil --set LocalHostName <new host name>
# TODO: - sudo scutil --set ComputerName <new name>
# TODO: 2. add authorized keys
# TODO: 3. install xcode (or at least check installed) (UI)
# TODO: 4. install updates? (UI)
# TODO: 5. add users - jenkins!
# TODO: 6. add '%admin          ALL = (ALL) NOPASSWD: ALL' in /etc/sudoers
# TODO: 7. run sudo xcode-select -s /Applications/Xcode.app/Contents/Developer to enable iOS builds

# this and next tasks are useless for remote setup, but may be used for local
- name: Check remote login
  become: true
  become_method: sudo
  command: systemsetup -getremotelogin
  register: getremotelogin
  changed_when: false
  check_mode: no

- name: Set remote login when not set
  become: true
  become_method: sudo
  command: systemsetup -f -setremotelogin on
  when: '"Remote Login: On" not in getremotelogin.stdout'

- name: Check system sleep
  become: true
  become_method: sudo
  command: systemsetup -getsleep
  # stdout example:
  # Sleep: Computer sleeps Never
  # Sleep: Display sleeps after 10 minutes
  # Sleep: Disk sleeps after 10 minutes
  register: getsleep
  changed_when: false
  check_mode: no

- name: Set computer never sleeps
  become: true
  become_method: sudo
  command: systemsetup -f -setcomputersleep "Never"
  when: '"Sleep: Computer sleeps Never" not in getsleep.stdout'

- name: Set disk never sleeps
  become: true
  become_method: sudo
  command: systemsetup -f -setharddisksleep "Never"
  when: '"Sleep: Disk sleeps" not in getsleep.stdout'


- name: Check homebrew installed
  command: /usr/local/bin/brew --version
  register: brew_version
  failed_when: false
  changed_when: false
  check_mode: no

# not tested: all macs have brew
# Requires sudo w/o password !
- name: Install homebrew
  shell: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  when: brew_version.rc != 0

- name: Update homebrew
  homebrew:
    update_homebrew: yes
  when: not ansible_check_mode

- name: Install packages
  homebrew:
    name: '{{ item }}'
    state: present
  with_items:
  - ninja
  - hg
  - wget
  - rsync

- name: Install Java
  homebrew_cask:
    name: '{{ item }}'
    state: present
  with_items:
  - java

- name: Install virtualenv package
  become: true
  become_method: sudo
  # FIXME: pip is not on path
  command: /usr/local/bin/pip install virtualenv
  register: result
  changed_when: '"Requirement already satisfied" not in result.stdout'

- name: Install system-wide six
  become: true
  become_method: sudo
  # FIXME: pip is not on path
  command: /usr/local/bin/pip install six
  register: result
  changed_when: '"Requirement already satisfied" not in result.stdout'

- name: Copy plists
  become: true
  become_method: sudo
  copy:
    src: '{{ item }}'
    dest: '/Library/LaunchDaemons/{{ item }}'
  with_items:
  - limit.core.plist
  - sysctl.plist

- name: Get core limits
  shell: launchctl limit | grep core
  register: corelimit
  changed_when: false
  check_mode: no

- name: Configure core limits
  become: true
  become_method: sudo
  command: launchctl limit core unlimited unlimited
  when: '"core        unlimited      unlimited" not in corelimit.stdout'

- name: Configure corefile format
  become: true
  become_method: sudo
  command: /usr/sbin/sysctl -w kern.corefile=%N.core.%P
  register: result
  changed_when: >-
    "kern.corefile: %N.core.%P -> %N.core.%P" not in result.stdout

# Jenkins user must be existing at this point
- name: Create jenkins working directory
  become: true
  become_method: sudo
  file:
    path:  /jenkins
    state: directory
    owner: jenkins
    group: wheel
    mode: '755'

- name: Check CMake version
  become: yes
  become_method: sudo
  shell: cmake --version
  register: check_cmake_version
  changed_when: false
  failed_when: false
  check_mode: no

- name: Install cmake
  shell: curl -sSL https://cmake.org/files/v3.10/cmake-3.10.2-Darwin-x86_64.tar.gz | sudo tar -xzC /usr/local/opt
  when: check_cmake_version.rc != 0

- name: Install cmake
  shell: sudo ln -s -f /usr/local/opt/cmake-3.10.2-Darwin-x86_64/bin/cmake /usr/local/bin/cmake
  when: check_cmake_version.rc != 0
