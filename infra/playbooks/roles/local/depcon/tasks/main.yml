---
- name: "Add depcon group {{ depcon_group }}"
  group:
    name: "{{ depcon_group }}"
    state: present

- name: "Add depcon user {{ depcon_user }}"
  user:
    name: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    home: "{{ depcon_home }}"
    createhome: yes
    shell: /bin/bash

- name: Add depcon user to 'docker' group
  user:
    name: '{{ item }}'
    groups: 'docker'
    append: True
  with_items:
  - "{{ depcon_user }}"

- name: "Create .ssh in {{ depcon_user }} home dir"
  become: true
  become_user: "{{ depcon_user }}"
  file:
    path: "{{ depcon_home }}/.ssh/"
    state: directory
    owner: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    mode: "u+rwx,g-rwx,o-rwx"

- name: Configure pub keys
  become: true
  become_user: "{{ depcon_user }}"
  lineinfile:
    path: "{{ depcon_home }}/.ssh/authorized_keys"
    line: "{{ item }}"
    create: true
  with_items: "{{ depcon_authorized_keys }}"

- name: Install Mercurial
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - mercurial

- name: Configure ssh private key
  become: true
  become_user: "{{ depcon_user }}"
  copy:
    content: "{{ hg_auth_private_key }}"
    dest: "{{ depcon_home }}/.ssh/hg.readonly_key"
    mode: 0600

- name: Configure HG connection for cloning from enk.me
  become: true
  become_user: "{{ depcon_user }}"
  copy:
    dest: "{{ depcon_home }}/.hgrc"
    content: |
      [ui]
      ssh = ssh -i ~/.ssh/hg.readonly_key

- name: Clone repo
  become: true
  become_user: "{{ depcon_user }}"
  hg:
    repo: ssh://hg@enk.me/deployment_console
    dest: "{{ depcon_home }}/src"
    revision: "{{ depcon_rev }}"

- name: Install awscli requirements
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - python-pip

- name: Install requirements for docker login & pull
  pip:
    name: "{{ item }}"
    state: present
  with_items:
  - awscli
  - docker-py

- name: Create AWS RC directory
  file:
    path: "{{ depcon_home }}/.aws"
    state: directory
    owner: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    mode: "u+rwx,g+rwx,o-rwx"

- name: Create AWS config file
  template:
    src: "aws/config.j2"
    dest: "{{ depcon_home }}/.aws/config"
    owner: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    mode: "u+rwx,g+rwx,o-rwx"

- name: Create AWS credentials file
  template:
    src: "aws/credentials.j2"
    dest: "{{ depcon_home }}/.aws/credentials"
    owner: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    mode: "u+rwx,g+rwx,o-rwx"

- name: Docker login AWS ECR
  shell: "eval $(aws ecr get-login --no-include-email)"
  become: true
  become_user: "{{ depcon_user }}"

# webadmin build requirements (npm, nodejs and Co)
- name: Install npm
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items:
  - npm

- name: Install N for NodeJS
  npm:
    name: n
    global: yes

- name: Install NodeJS
  command: n stable
  register: r
  changed_when: "'installed' in r.stdout"

- name: Install compass
  apt:
    name: ruby-compass
    state: present

- name: Install global build requirements
  npm:
    name: '{{ item }}'
    global: yes
  with_items:
  - grunt
  - grunt-cli
  - bower
  - compass

- name: Install npm packages
  become: true
  become_user: "{{ depcon_user }}"
  command: "npm install"
  args:
    chdir: "{{ depcon_home }}/src/front_end"

- name: Install bower packages
  become: true
  become_user: "{{ depcon_user }}"
  command: "bower install"
  args:
    chdir: "{{ depcon_home }}/src/front_end"

- name: build frontend
  become: true
  become_user: "{{ depcon_user }}"
  command: "./make.sh build"
  args:
    chdir: "{{ depcon_home }}/src"
  register: res
  # On success rc != 0
  failed_when: '"Done, without errors." not in res.stdout'

- name: Create some required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ depcon_user }}"
    group: "{{ depcon_group }}"
    mode: "777"
  with_items:
  - "/srv/containers/depcon/var/db"
  - "/srv/containers/depcon/var/log"

- name: Docker build
  become: true
  become_user: "{{ depcon_user }}"
  command: "/usr/local/bin/docker-compose -f docker-compose.yml build"
  args:
    chdir: "{{ depcon_home }}/src/"

- name: Create SystemD Unit
  include_role:
    name: tumf.systemd-service
  vars:
    systemd_service_name: "depcon"
    systemd_service_Service_User: "{{ depcon_user }}"
    systemd_service_Service_WorkingDirectory: "{{ depcon_home }}"
    systemd_service_Unit_Description: NX  Deployment Console
    systemd_service_Unit_Requires: docker.service
    systemd_service_Unit_After: docker.service
    systemd_service_Service_ExecStartPre:
    - /usr/local/bin/docker-compose -f {{ depcon_home }}/src/docker-compose.yml down -v
    - /usr/local/bin/docker-compose -f {{ depcon_home }}/src/docker-compose.yml rm -v
    systemd_service_Service_ExecStart: >-
      /usr/local/bin/docker-compose -f {{ depcon_home }}/src/docker-compose.yml up
    systemd_service_Service_ExecStop: >-
      /usr/local/bin/docker-compose -f  {{ depcon_home }}/src/docker-compose.yml down -v
  notify:
  - Restart Depcon

- service:
    name: depcon
    state: started
