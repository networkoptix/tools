- name: Define VM when it's undefined
  include_tasks: change_to_shutdown.yml
  when: libvirt_guest__current_state == 'undefined'

- name: "Start {{ libvirt_guest__hostname }}"
  virt:
    name: "{{ libvirt_guest__hostname }}"
    state: running
    autostart: "{{ libvirt_guest__autostart }}"
    uri: "{{ libvirt_connection }}"
  delegate_to: "{{ libvirt_host }}"
  register: state
  when: >-
    libvirt_guest__current_state == 'shutdown' or
    libvirt_guest__current_state == 'paused'

- name: Get autostart domain list
  command: "virsh list --autostart --name"
  register: autostart_list
  changed_when: false
  delegate_to: "{{ libvirt_host }}"
  check_mode: no

- name: Disable VM autostart if it's enabled
  command: "virsh autostart {{ libvirt_guest__hostname }} --disable"
  delegate_to: "{{ libvirt_host }}"
  when: >-
    libvirt_guest__autostart == False and
    libvirt_guest__hostname in autostart_list.stdout_lines

- name: Enable VM autostart if it's disabled
  command: "virsh autostart {{ libvirt_guest__hostname }}"
  delegate_to: "{{ libvirt_host }}"
  when: >-
    libvirt_guest__autostart == True and
    libvirt_guest__hostname not in autostart_list.stdout_lines

- name: Pause before gathering facts
  pause:
    seconds: 1
  when: state.changed

- name: Gather all facts about host and its VM
  include_tasks: get_facts.yml
  when: state.changed

- assert:
    that:
    - libvirt_guest__current_state == 'running'
  when: not ansible_check_mode

- include_role:
    name: "libvirt_guest_init_linux"
    tasks_from: cleanup
  when: libvirt_guest__type == 'linux'

- include_role:
    name: "libvirt_guest_init_windows"
    tasks_from: cleanup
  when: libvirt_guest__type == 'windows'
