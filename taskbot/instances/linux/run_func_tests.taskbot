# -*- sh -*-

set -o errexit +o nounset -o noclobber
ARGS="$TASKBOT_OPTIONS $TASKBOT_CONFIG"

# # + Prepare environment
FUNTESTS_DIR="$TASKBOT_VAR"/var/functest
if [ -d $FUNTESTS_DIR/tmp/vagrant ]; then
  cd $FUNTESTS_DIR/tmp/vagrant
  vagrant destroy -f
fi
[ -d $FUNTESTS_DIR/wd ] && rm -rf $FUNTESTS_DIR/wd
[ -d $FUNTESTS_DIR/tmp ] && rm -rf $FUNTESTS_DIR/tmp
[ -d $FUNTESTS_DIR/result ] && rm -rf $FUNTESTS_DIR/result
mkdir -p $FUNTESTS_DIR/wd $FUNTESTS_DIR/tmp $FUNTESTS_DIR/result

# + Prepare box files
rsync -av --delete rsync://noptix.enk.me/buildenv/test/sample.mkv $FUNTESTS_DIR/wd
CURRENT_CONFIG="$TASKBOT_VAR"/nx_vms/build_variables/target/current_config
ARCH=$(grep arch= "$CURRENT_CONFIG" | sed -r 's/arch=//')
DEB_PROP_FILENAME="$TASKBOT_VAR/nx_vms/debsetup/mediaserver-deb/$ARCH/finalname-server.properties"
DEB_FILENAME=$(cat "$DEB_PROP_FILENAME" | sed -r 's/server\.finalName=//')
DEB_FILEPATH="$TASKBOT_VAR/nx_vms/debsetup/mediaserver-deb/$ARCH/deb/$DEB_FILENAME.deb"
echo $DEB_FILEPATH
cp $DEB_FILEPATH "$FUNTESTS_DIR"/wd/networkoptix-mediaserver.deb
#cp "$TASKBOT_VAR"/var/testing/vagrant/networkoptix-mediaserver.deb "$FUNTESTS_DIR"/wd

# + Run tests
echo $FUNTESTS_DIR/wd
cd $FUNTESTS_DIR/wd && py.test \
  "$TASKBOT_VAR"/nx_vms/func_tests \
  --work-dir="$FUNTESTS_DIR"/tmp \
  --html="$FUNTESTS_DIR"/result/functest.html \
  --self-contained-html || true

# + Store results
$TASKBOT_BIN/file.py \
     $TASKBOT_CONFIG \
    --path "$FUNTESTS_DIR"/result \
    --mask '*.html'

# + Clear test data
if [ -d $FUNTESTS_DIR/tmp/vagrant ]; then
  cd $FUNTESTS_DIR/tmp/vagrant
  vagrant destroy -f
fi
[ -d $FUNTESTS_DIR/wd ] && rm -rf $FUNTESTS_DIR/wd
[ -d $FUNTESTS_DIR/tmp ] && rm -rf $FUNTESTS_DIR/tmp
